
urt__2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e68  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003ff4  08003ff4  00004ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800403c  0800403c  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  0800403c  0800403c  0000503c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004044  08004044  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004044  08004044  00005044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004048  08004048  00005048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800404c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000010  0800405c  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  0800405c  00006184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4ab  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e96  00000000  00000000  000124eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  00014388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077f  00000000  00000000  00014d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001906  00000000  00000000  000154d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c785  00000000  00000000  00016ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7180  00000000  00000000  00023562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea6e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026fc  00000000  00000000  000ea728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000ece24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003fdc 	.word	0x08003fdc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08003fdc 	.word	0x08003fdc

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <Send_WifiCmd>:
uint8_t Timer = 0;
uint8_t txdata[200];

extern UART_HandleTypeDef hlpuart1;

void Send_WifiCmd(void) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
    switch (cmd) {
 80004c0:	4baf      	ldr	r3, [pc, #700]	@ (8000780 <Send_WifiCmd+0x2c4>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	3b01      	subs	r3, #1
 80004c8:	2b13      	cmp	r3, #19
 80004ca:	f200 84b8 	bhi.w	8000e3e <Send_WifiCmd+0x982>
 80004ce:	a201      	add	r2, pc, #4	@ (adr r2, 80004d4 <Send_WifiCmd+0x18>)
 80004d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d4:	08000525 	.word	0x08000525
 80004d8:	0800054b 	.word	0x0800054b
 80004dc:	0800056b 	.word	0x0800056b
 80004e0:	0800059d 	.word	0x0800059d
 80004e4:	080005e7 	.word	0x080005e7
 80004e8:	08000607 	.word	0x08000607
 80004ec:	0800066d 	.word	0x0800066d
 80004f0:	0800068b 	.word	0x0800068b
 80004f4:	080006f1 	.word	0x080006f1
 80004f8:	0800070f 	.word	0x0800070f
 80004fc:	08000763 	.word	0x08000763
 8000500:	08000799 	.word	0x08000799
 8000504:	080007f3 	.word	0x080007f3
 8000508:	08000811 	.word	0x08000811
 800050c:	08000931 	.word	0x08000931
 8000510:	0800094f 	.word	0x0800094f
 8000514:	08000a5f 	.word	0x08000a5f
 8000518:	08000a91 	.word	0x08000a91
 800051c:	08000b03 	.word	0x08000b03
 8000520:	08000b35 	.word	0x08000b35
    case 1:
        HAL_GPIO_WritePin(GPIOB, WIFI_RST_Pin, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	2104      	movs	r1, #4
 8000528:	4896      	ldr	r0, [pc, #600]	@ (8000784 <Send_WifiCmd+0x2c8>)
 800052a:	f001 f9f9 	bl	8001920 <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 800052e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000532:	f000 fec7 	bl	80012c4 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, WIFI_RST_Pin, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2104      	movs	r1, #4
 800053a:	4892      	ldr	r0, [pc, #584]	@ (8000784 <Send_WifiCmd+0x2c8>)
 800053c:	f001 f9f0 	bl	8001920 <HAL_GPIO_WritePin>
        cmd = 3;
 8000540:	4b8f      	ldr	r3, [pc, #572]	@ (8000780 <Send_WifiCmd+0x2c4>)
 8000542:	2203      	movs	r2, #3
 8000544:	701a      	strb	r2, [r3, #0]
        break;
 8000546:	f000 bc7a 	b.w	8000e3e <Send_WifiCmd+0x982>

    case 2:
        if (++Timer > 3) {
 800054a:	4b8f      	ldr	r3, [pc, #572]	@ (8000788 <Send_WifiCmd+0x2cc>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	3301      	adds	r3, #1
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4b8d      	ldr	r3, [pc, #564]	@ (8000788 <Send_WifiCmd+0x2cc>)
 8000554:	701a      	strb	r2, [r3, #0]
 8000556:	4b8c      	ldr	r3, [pc, #560]	@ (8000788 <Send_WifiCmd+0x2cc>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b03      	cmp	r3, #3
 800055c:	f240 845e 	bls.w	8000e1c <Send_WifiCmd+0x960>
            Timer = 0;
 8000560:	4b89      	ldr	r3, [pc, #548]	@ (8000788 <Send_WifiCmd+0x2cc>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000566:	f000 bc59 	b.w	8000e1c <Send_WifiCmd+0x960>

    case 3:
        txdata[0] = 'A';
 800056a:	4b88      	ldr	r3, [pc, #544]	@ (800078c <Send_WifiCmd+0x2d0>)
 800056c:	2241      	movs	r2, #65	@ 0x41
 800056e:	701a      	strb	r2, [r3, #0]
        txdata[1] = 'T';
 8000570:	4b86      	ldr	r3, [pc, #536]	@ (800078c <Send_WifiCmd+0x2d0>)
 8000572:	2254      	movs	r2, #84	@ 0x54
 8000574:	705a      	strb	r2, [r3, #1]
        txdata[2] = '\r';
 8000576:	4b85      	ldr	r3, [pc, #532]	@ (800078c <Send_WifiCmd+0x2d0>)
 8000578:	220d      	movs	r2, #13
 800057a:	709a      	strb	r2, [r3, #2]
        txdata[3] = '\n';
 800057c:	4b83      	ldr	r3, [pc, #524]	@ (800078c <Send_WifiCmd+0x2d0>)
 800057e:	220a      	movs	r2, #10
 8000580:	70da      	strb	r2, [r3, #3]
        HAL_UART_Transmit_IT(&hlpuart1, txdata, 4);
 8000582:	2204      	movs	r2, #4
 8000584:	4981      	ldr	r1, [pc, #516]	@ (800078c <Send_WifiCmd+0x2d0>)
 8000586:	4882      	ldr	r0, [pc, #520]	@ (8000790 <Send_WifiCmd+0x2d4>)
 8000588:	f002 fc08 	bl	8002d9c <HAL_UART_Transmit_IT>
        rxcode = 1; // Now valid
 800058c:	4b81      	ldr	r3, [pc, #516]	@ (8000794 <Send_WifiCmd+0x2d8>)
 800058e:	2201      	movs	r2, #1
 8000590:	701a      	strb	r2, [r3, #0]
        cmd = 2;
 8000592:	4b7b      	ldr	r3, [pc, #492]	@ (8000780 <Send_WifiCmd+0x2c4>)
 8000594:	2202      	movs	r2, #2
 8000596:	701a      	strb	r2, [r3, #0]
        break;
 8000598:	f000 bc51 	b.w	8000e3e <Send_WifiCmd+0x982>

    case 4:
        txdata[0] = 'A';
 800059c:	4b7b      	ldr	r3, [pc, #492]	@ (800078c <Send_WifiCmd+0x2d0>)
 800059e:	2241      	movs	r2, #65	@ 0x41
 80005a0:	701a      	strb	r2, [r3, #0]
        txdata[1] = 'T';
 80005a2:	4b7a      	ldr	r3, [pc, #488]	@ (800078c <Send_WifiCmd+0x2d0>)
 80005a4:	2254      	movs	r2, #84	@ 0x54
 80005a6:	705a      	strb	r2, [r3, #1]
        txdata[2] = '+';
 80005a8:	4b78      	ldr	r3, [pc, #480]	@ (800078c <Send_WifiCmd+0x2d0>)
 80005aa:	222b      	movs	r2, #43	@ 0x2b
 80005ac:	709a      	strb	r2, [r3, #2]
        txdata[3] = 'R';
 80005ae:	4b77      	ldr	r3, [pc, #476]	@ (800078c <Send_WifiCmd+0x2d0>)
 80005b0:	2252      	movs	r2, #82	@ 0x52
 80005b2:	70da      	strb	r2, [r3, #3]
        txdata[4] = 'S';
 80005b4:	4b75      	ldr	r3, [pc, #468]	@ (800078c <Send_WifiCmd+0x2d0>)
 80005b6:	2253      	movs	r2, #83	@ 0x53
 80005b8:	711a      	strb	r2, [r3, #4]
        txdata[5] = 'T';
 80005ba:	4b74      	ldr	r3, [pc, #464]	@ (800078c <Send_WifiCmd+0x2d0>)
 80005bc:	2254      	movs	r2, #84	@ 0x54
 80005be:	715a      	strb	r2, [r3, #5]
        txdata[6] = '\r';
 80005c0:	4b72      	ldr	r3, [pc, #456]	@ (800078c <Send_WifiCmd+0x2d0>)
 80005c2:	220d      	movs	r2, #13
 80005c4:	719a      	strb	r2, [r3, #6]
        txdata[7] = '\n';
 80005c6:	4b71      	ldr	r3, [pc, #452]	@ (800078c <Send_WifiCmd+0x2d0>)
 80005c8:	220a      	movs	r2, #10
 80005ca:	71da      	strb	r2, [r3, #7]
        HAL_UART_Transmit_IT(&hlpuart1, txdata, 8);
 80005cc:	2208      	movs	r2, #8
 80005ce:	496f      	ldr	r1, [pc, #444]	@ (800078c <Send_WifiCmd+0x2d0>)
 80005d0:	486f      	ldr	r0, [pc, #444]	@ (8000790 <Send_WifiCmd+0x2d4>)
 80005d2:	f002 fbe3 	bl	8002d9c <HAL_UART_Transmit_IT>
        rxcode = 2; // Now valid
 80005d6:	4b6f      	ldr	r3, [pc, #444]	@ (8000794 <Send_WifiCmd+0x2d8>)
 80005d8:	2202      	movs	r2, #2
 80005da:	701a      	strb	r2, [r3, #0]
        cmd = 5;
 80005dc:	4b68      	ldr	r3, [pc, #416]	@ (8000780 <Send_WifiCmd+0x2c4>)
 80005de:	2205      	movs	r2, #5
 80005e0:	701a      	strb	r2, [r3, #0]
        break;
 80005e2:	f000 bc2c 	b.w	8000e3e <Send_WifiCmd+0x982>

    // Rest of the cases remain unchanged, with rxcode assignments now valid
    case 5:
        if (++Timer > 3) {
 80005e6:	4b68      	ldr	r3, [pc, #416]	@ (8000788 <Send_WifiCmd+0x2cc>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	4b66      	ldr	r3, [pc, #408]	@ (8000788 <Send_WifiCmd+0x2cc>)
 80005f0:	701a      	strb	r2, [r3, #0]
 80005f2:	4b65      	ldr	r3, [pc, #404]	@ (8000788 <Send_WifiCmd+0x2cc>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b03      	cmp	r3, #3
 80005f8:	f240 8412 	bls.w	8000e20 <Send_WifiCmd+0x964>
            Timer = 0;
 80005fc:	4b62      	ldr	r3, [pc, #392]	@ (8000788 <Send_WifiCmd+0x2cc>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000602:	f000 bc0d 	b.w	8000e20 <Send_WifiCmd+0x964>

    case 6:
        txdata[0] = 'A';
 8000606:	4b61      	ldr	r3, [pc, #388]	@ (800078c <Send_WifiCmd+0x2d0>)
 8000608:	2241      	movs	r2, #65	@ 0x41
 800060a:	701a      	strb	r2, [r3, #0]
        txdata[1] = 'T';
 800060c:	4b5f      	ldr	r3, [pc, #380]	@ (800078c <Send_WifiCmd+0x2d0>)
 800060e:	2254      	movs	r2, #84	@ 0x54
 8000610:	705a      	strb	r2, [r3, #1]
        txdata[2] = '+';
 8000612:	4b5e      	ldr	r3, [pc, #376]	@ (800078c <Send_WifiCmd+0x2d0>)
 8000614:	222b      	movs	r2, #43	@ 0x2b
 8000616:	709a      	strb	r2, [r3, #2]
        txdata[3] = 'C';
 8000618:	4b5c      	ldr	r3, [pc, #368]	@ (800078c <Send_WifiCmd+0x2d0>)
 800061a:	2243      	movs	r2, #67	@ 0x43
 800061c:	70da      	strb	r2, [r3, #3]
        txdata[4] = 'I';
 800061e:	4b5b      	ldr	r3, [pc, #364]	@ (800078c <Send_WifiCmd+0x2d0>)
 8000620:	2249      	movs	r2, #73	@ 0x49
 8000622:	711a      	strb	r2, [r3, #4]
        txdata[5] = 'P';
 8000624:	4b59      	ldr	r3, [pc, #356]	@ (800078c <Send_WifiCmd+0x2d0>)
 8000626:	2250      	movs	r2, #80	@ 0x50
 8000628:	715a      	strb	r2, [r3, #5]
        txdata[6] = 'M';
 800062a:	4b58      	ldr	r3, [pc, #352]	@ (800078c <Send_WifiCmd+0x2d0>)
 800062c:	224d      	movs	r2, #77	@ 0x4d
 800062e:	719a      	strb	r2, [r3, #6]
        txdata[7] = 'U';
 8000630:	4b56      	ldr	r3, [pc, #344]	@ (800078c <Send_WifiCmd+0x2d0>)
 8000632:	2255      	movs	r2, #85	@ 0x55
 8000634:	71da      	strb	r2, [r3, #7]
        txdata[8] = 'X';
 8000636:	4b55      	ldr	r3, [pc, #340]	@ (800078c <Send_WifiCmd+0x2d0>)
 8000638:	2258      	movs	r2, #88	@ 0x58
 800063a:	721a      	strb	r2, [r3, #8]
        txdata[9] = '=';
 800063c:	4b53      	ldr	r3, [pc, #332]	@ (800078c <Send_WifiCmd+0x2d0>)
 800063e:	223d      	movs	r2, #61	@ 0x3d
 8000640:	725a      	strb	r2, [r3, #9]
        txdata[10] = '0';
 8000642:	4b52      	ldr	r3, [pc, #328]	@ (800078c <Send_WifiCmd+0x2d0>)
 8000644:	2230      	movs	r2, #48	@ 0x30
 8000646:	729a      	strb	r2, [r3, #10]
        txdata[11] = '\r';
 8000648:	4b50      	ldr	r3, [pc, #320]	@ (800078c <Send_WifiCmd+0x2d0>)
 800064a:	220d      	movs	r2, #13
 800064c:	72da      	strb	r2, [r3, #11]
        txdata[12] = '\n';
 800064e:	4b4f      	ldr	r3, [pc, #316]	@ (800078c <Send_WifiCmd+0x2d0>)
 8000650:	220a      	movs	r2, #10
 8000652:	731a      	strb	r2, [r3, #12]
        HAL_UART_Transmit_IT(&hlpuart1, txdata, 13);
 8000654:	220d      	movs	r2, #13
 8000656:	494d      	ldr	r1, [pc, #308]	@ (800078c <Send_WifiCmd+0x2d0>)
 8000658:	484d      	ldr	r0, [pc, #308]	@ (8000790 <Send_WifiCmd+0x2d4>)
 800065a:	f002 fb9f 	bl	8002d9c <HAL_UART_Transmit_IT>
        rxcode = 3;
 800065e:	4b4d      	ldr	r3, [pc, #308]	@ (8000794 <Send_WifiCmd+0x2d8>)
 8000660:	2203      	movs	r2, #3
 8000662:	701a      	strb	r2, [r3, #0]
        cmd = 7;
 8000664:	4b46      	ldr	r3, [pc, #280]	@ (8000780 <Send_WifiCmd+0x2c4>)
 8000666:	2207      	movs	r2, #7
 8000668:	701a      	strb	r2, [r3, #0]
        break;
 800066a:	e3e8      	b.n	8000e3e <Send_WifiCmd+0x982>

    case 7:
        if (++Timer > 3) {
 800066c:	4b46      	ldr	r3, [pc, #280]	@ (8000788 <Send_WifiCmd+0x2cc>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	3301      	adds	r3, #1
 8000672:	b2da      	uxtb	r2, r3
 8000674:	4b44      	ldr	r3, [pc, #272]	@ (8000788 <Send_WifiCmd+0x2cc>)
 8000676:	701a      	strb	r2, [r3, #0]
 8000678:	4b43      	ldr	r3, [pc, #268]	@ (8000788 <Send_WifiCmd+0x2cc>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b03      	cmp	r3, #3
 800067e:	f240 83d1 	bls.w	8000e24 <Send_WifiCmd+0x968>
            Timer = 0;
 8000682:	4b41      	ldr	r3, [pc, #260]	@ (8000788 <Send_WifiCmd+0x2cc>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000688:	e3cc      	b.n	8000e24 <Send_WifiCmd+0x968>

    case 8:
        txdata[0] = 'A';
 800068a:	4b40      	ldr	r3, [pc, #256]	@ (800078c <Send_WifiCmd+0x2d0>)
 800068c:	2241      	movs	r2, #65	@ 0x41
 800068e:	701a      	strb	r2, [r3, #0]
        txdata[1] = 'T';
 8000690:	4b3e      	ldr	r3, [pc, #248]	@ (800078c <Send_WifiCmd+0x2d0>)
 8000692:	2254      	movs	r2, #84	@ 0x54
 8000694:	705a      	strb	r2, [r3, #1]
        txdata[2] = '+';
 8000696:	4b3d      	ldr	r3, [pc, #244]	@ (800078c <Send_WifiCmd+0x2d0>)
 8000698:	222b      	movs	r2, #43	@ 0x2b
 800069a:	709a      	strb	r2, [r3, #2]
        txdata[3] = 'C';
 800069c:	4b3b      	ldr	r3, [pc, #236]	@ (800078c <Send_WifiCmd+0x2d0>)
 800069e:	2243      	movs	r2, #67	@ 0x43
 80006a0:	70da      	strb	r2, [r3, #3]
        txdata[4] = 'W';
 80006a2:	4b3a      	ldr	r3, [pc, #232]	@ (800078c <Send_WifiCmd+0x2d0>)
 80006a4:	2257      	movs	r2, #87	@ 0x57
 80006a6:	711a      	strb	r2, [r3, #4]
        txdata[5] = 'M';
 80006a8:	4b38      	ldr	r3, [pc, #224]	@ (800078c <Send_WifiCmd+0x2d0>)
 80006aa:	224d      	movs	r2, #77	@ 0x4d
 80006ac:	715a      	strb	r2, [r3, #5]
        txdata[6] = 'O';
 80006ae:	4b37      	ldr	r3, [pc, #220]	@ (800078c <Send_WifiCmd+0x2d0>)
 80006b0:	224f      	movs	r2, #79	@ 0x4f
 80006b2:	719a      	strb	r2, [r3, #6]
        txdata[7] = 'D';
 80006b4:	4b35      	ldr	r3, [pc, #212]	@ (800078c <Send_WifiCmd+0x2d0>)
 80006b6:	2244      	movs	r2, #68	@ 0x44
 80006b8:	71da      	strb	r2, [r3, #7]
        txdata[8] = 'E';
 80006ba:	4b34      	ldr	r3, [pc, #208]	@ (800078c <Send_WifiCmd+0x2d0>)
 80006bc:	2245      	movs	r2, #69	@ 0x45
 80006be:	721a      	strb	r2, [r3, #8]
        txdata[9] = '=';
 80006c0:	4b32      	ldr	r3, [pc, #200]	@ (800078c <Send_WifiCmd+0x2d0>)
 80006c2:	223d      	movs	r2, #61	@ 0x3d
 80006c4:	725a      	strb	r2, [r3, #9]
        txdata[10] = '3';
 80006c6:	4b31      	ldr	r3, [pc, #196]	@ (800078c <Send_WifiCmd+0x2d0>)
 80006c8:	2233      	movs	r2, #51	@ 0x33
 80006ca:	729a      	strb	r2, [r3, #10]
        txdata[11] = '\r';
 80006cc:	4b2f      	ldr	r3, [pc, #188]	@ (800078c <Send_WifiCmd+0x2d0>)
 80006ce:	220d      	movs	r2, #13
 80006d0:	72da      	strb	r2, [r3, #11]
        txdata[12] = '\n';
 80006d2:	4b2e      	ldr	r3, [pc, #184]	@ (800078c <Send_WifiCmd+0x2d0>)
 80006d4:	220a      	movs	r2, #10
 80006d6:	731a      	strb	r2, [r3, #12]
        HAL_UART_Transmit_IT(&hlpuart1, txdata, 13);
 80006d8:	220d      	movs	r2, #13
 80006da:	492c      	ldr	r1, [pc, #176]	@ (800078c <Send_WifiCmd+0x2d0>)
 80006dc:	482c      	ldr	r0, [pc, #176]	@ (8000790 <Send_WifiCmd+0x2d4>)
 80006de:	f002 fb5d 	bl	8002d9c <HAL_UART_Transmit_IT>
        rxcode = 4;
 80006e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000794 <Send_WifiCmd+0x2d8>)
 80006e4:	2204      	movs	r2, #4
 80006e6:	701a      	strb	r2, [r3, #0]
        cmd = 9;
 80006e8:	4b25      	ldr	r3, [pc, #148]	@ (8000780 <Send_WifiCmd+0x2c4>)
 80006ea:	2209      	movs	r2, #9
 80006ec:	701a      	strb	r2, [r3, #0]
        break;
 80006ee:	e3a6      	b.n	8000e3e <Send_WifiCmd+0x982>

    case 9:
        if (++Timer > 3) {
 80006f0:	4b25      	ldr	r3, [pc, #148]	@ (8000788 <Send_WifiCmd+0x2cc>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	3301      	adds	r3, #1
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b23      	ldr	r3, [pc, #140]	@ (8000788 <Send_WifiCmd+0x2cc>)
 80006fa:	701a      	strb	r2, [r3, #0]
 80006fc:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <Send_WifiCmd+0x2cc>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b03      	cmp	r3, #3
 8000702:	f240 8391 	bls.w	8000e28 <Send_WifiCmd+0x96c>
            Timer = 0;
 8000706:	4b20      	ldr	r3, [pc, #128]	@ (8000788 <Send_WifiCmd+0x2cc>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
        }
        break;
 800070c:	e38c      	b.n	8000e28 <Send_WifiCmd+0x96c>

    case 10:
        txdata[0] = 'A';
 800070e:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <Send_WifiCmd+0x2d0>)
 8000710:	2241      	movs	r2, #65	@ 0x41
 8000712:	701a      	strb	r2, [r3, #0]
        txdata[1] = 'T';
 8000714:	4b1d      	ldr	r3, [pc, #116]	@ (800078c <Send_WifiCmd+0x2d0>)
 8000716:	2254      	movs	r2, #84	@ 0x54
 8000718:	705a      	strb	r2, [r3, #1]
        txdata[2] = '+';
 800071a:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <Send_WifiCmd+0x2d0>)
 800071c:	222b      	movs	r2, #43	@ 0x2b
 800071e:	709a      	strb	r2, [r3, #2]
        txdata[3] = 'C';
 8000720:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <Send_WifiCmd+0x2d0>)
 8000722:	2243      	movs	r2, #67	@ 0x43
 8000724:	70da      	strb	r2, [r3, #3]
        txdata[4] = 'W';
 8000726:	4b19      	ldr	r3, [pc, #100]	@ (800078c <Send_WifiCmd+0x2d0>)
 8000728:	2257      	movs	r2, #87	@ 0x57
 800072a:	711a      	strb	r2, [r3, #4]
        txdata[5] = 'L';
 800072c:	4b17      	ldr	r3, [pc, #92]	@ (800078c <Send_WifiCmd+0x2d0>)
 800072e:	224c      	movs	r2, #76	@ 0x4c
 8000730:	715a      	strb	r2, [r3, #5]
        txdata[6] = 'A';
 8000732:	4b16      	ldr	r3, [pc, #88]	@ (800078c <Send_WifiCmd+0x2d0>)
 8000734:	2241      	movs	r2, #65	@ 0x41
 8000736:	719a      	strb	r2, [r3, #6]
        txdata[7] = 'P';
 8000738:	4b14      	ldr	r3, [pc, #80]	@ (800078c <Send_WifiCmd+0x2d0>)
 800073a:	2250      	movs	r2, #80	@ 0x50
 800073c:	71da      	strb	r2, [r3, #7]
        txdata[8] = '\r';
 800073e:	4b13      	ldr	r3, [pc, #76]	@ (800078c <Send_WifiCmd+0x2d0>)
 8000740:	220d      	movs	r2, #13
 8000742:	721a      	strb	r2, [r3, #8]
        txdata[9] = '\n';
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <Send_WifiCmd+0x2d0>)
 8000746:	220a      	movs	r2, #10
 8000748:	725a      	strb	r2, [r3, #9]
        HAL_UART_Transmit_IT(&hlpuart1, txdata, 10);
 800074a:	220a      	movs	r2, #10
 800074c:	490f      	ldr	r1, [pc, #60]	@ (800078c <Send_WifiCmd+0x2d0>)
 800074e:	4810      	ldr	r0, [pc, #64]	@ (8000790 <Send_WifiCmd+0x2d4>)
 8000750:	f002 fb24 	bl	8002d9c <HAL_UART_Transmit_IT>
        rxcode = 5;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <Send_WifiCmd+0x2d8>)
 8000756:	2205      	movs	r2, #5
 8000758:	701a      	strb	r2, [r3, #0]
        cmd = 11;
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <Send_WifiCmd+0x2c4>)
 800075c:	220b      	movs	r2, #11
 800075e:	701a      	strb	r2, [r3, #0]
        break;
 8000760:	e36d      	b.n	8000e3e <Send_WifiCmd+0x982>

    case 11:
        if (++Timer > 3) {
 8000762:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <Send_WifiCmd+0x2cc>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	3301      	adds	r3, #1
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4b07      	ldr	r3, [pc, #28]	@ (8000788 <Send_WifiCmd+0x2cc>)
 800076c:	701a      	strb	r2, [r3, #0]
 800076e:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <Send_WifiCmd+0x2cc>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b03      	cmp	r3, #3
 8000774:	f240 835a 	bls.w	8000e2c <Send_WifiCmd+0x970>
            Timer = 0;
 8000778:	4b03      	ldr	r3, [pc, #12]	@ (8000788 <Send_WifiCmd+0x2cc>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800077e:	e355      	b.n	8000e2c <Send_WifiCmd+0x970>
 8000780:	20000000 	.word	0x20000000
 8000784:	48000400 	.word	0x48000400
 8000788:	2000002d 	.word	0x2000002d
 800078c:	20000030 	.word	0x20000030
 8000790:	200000f8 	.word	0x200000f8
 8000794:	2000002c 	.word	0x2000002c

    case 12:
        txdata[0] = 'A';
 8000798:	4bb8      	ldr	r3, [pc, #736]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 800079a:	2241      	movs	r2, #65	@ 0x41
 800079c:	701a      	strb	r2, [r3, #0]
        txdata[1] = 'T';
 800079e:	4bb7      	ldr	r3, [pc, #732]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80007a0:	2254      	movs	r2, #84	@ 0x54
 80007a2:	705a      	strb	r2, [r3, #1]
        txdata[2] = '+';
 80007a4:	4bb5      	ldr	r3, [pc, #724]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80007a6:	222b      	movs	r2, #43	@ 0x2b
 80007a8:	709a      	strb	r2, [r3, #2]
        txdata[3] = 'C';
 80007aa:	4bb4      	ldr	r3, [pc, #720]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80007ac:	2243      	movs	r2, #67	@ 0x43
 80007ae:	70da      	strb	r2, [r3, #3]
        txdata[4] = 'W';
 80007b0:	4bb2      	ldr	r3, [pc, #712]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80007b2:	2257      	movs	r2, #87	@ 0x57
 80007b4:	711a      	strb	r2, [r3, #4]
        txdata[5] = 'J';
 80007b6:	4bb1      	ldr	r3, [pc, #708]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80007b8:	224a      	movs	r2, #74	@ 0x4a
 80007ba:	715a      	strb	r2, [r3, #5]
        txdata[6] = 'A';
 80007bc:	4baf      	ldr	r3, [pc, #700]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80007be:	2241      	movs	r2, #65	@ 0x41
 80007c0:	719a      	strb	r2, [r3, #6]
        txdata[7] = 'P';
 80007c2:	4bae      	ldr	r3, [pc, #696]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80007c4:	2250      	movs	r2, #80	@ 0x50
 80007c6:	71da      	strb	r2, [r3, #7]
        txdata[8] = '?';
 80007c8:	4bac      	ldr	r3, [pc, #688]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80007ca:	223f      	movs	r2, #63	@ 0x3f
 80007cc:	721a      	strb	r2, [r3, #8]
        txdata[9] = '\r';
 80007ce:	4bab      	ldr	r3, [pc, #684]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80007d0:	220d      	movs	r2, #13
 80007d2:	725a      	strb	r2, [r3, #9]
        txdata[10] = '\n';
 80007d4:	4ba9      	ldr	r3, [pc, #676]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80007d6:	220a      	movs	r2, #10
 80007d8:	729a      	strb	r2, [r3, #10]
        HAL_UART_Transmit_IT(&hlpuart1, txdata, 11);
 80007da:	220b      	movs	r2, #11
 80007dc:	49a7      	ldr	r1, [pc, #668]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80007de:	48a8      	ldr	r0, [pc, #672]	@ (8000a80 <Send_WifiCmd+0x5c4>)
 80007e0:	f002 fadc 	bl	8002d9c <HAL_UART_Transmit_IT>
        rxcode = 6;
 80007e4:	4ba7      	ldr	r3, [pc, #668]	@ (8000a84 <Send_WifiCmd+0x5c8>)
 80007e6:	2206      	movs	r2, #6
 80007e8:	701a      	strb	r2, [r3, #0]
        cmd = 13;
 80007ea:	4ba7      	ldr	r3, [pc, #668]	@ (8000a88 <Send_WifiCmd+0x5cc>)
 80007ec:	220d      	movs	r2, #13
 80007ee:	701a      	strb	r2, [r3, #0]
        break;
 80007f0:	e325      	b.n	8000e3e <Send_WifiCmd+0x982>

    case 13:
        if (++Timer > 3) {
 80007f2:	4ba6      	ldr	r3, [pc, #664]	@ (8000a8c <Send_WifiCmd+0x5d0>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	3301      	adds	r3, #1
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4ba4      	ldr	r3, [pc, #656]	@ (8000a8c <Send_WifiCmd+0x5d0>)
 80007fc:	701a      	strb	r2, [r3, #0]
 80007fe:	4ba3      	ldr	r3, [pc, #652]	@ (8000a8c <Send_WifiCmd+0x5d0>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b03      	cmp	r3, #3
 8000804:	f240 8314 	bls.w	8000e30 <Send_WifiCmd+0x974>
            Timer = 0;
 8000808:	4ba0      	ldr	r3, [pc, #640]	@ (8000a8c <Send_WifiCmd+0x5d0>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800080e:	e30f      	b.n	8000e30 <Send_WifiCmd+0x974>

    case 14:
        txdata[0] = 'A';
 8000810:	4b9a      	ldr	r3, [pc, #616]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000812:	2241      	movs	r2, #65	@ 0x41
 8000814:	701a      	strb	r2, [r3, #0]
        txdata[1] = 'T';
 8000816:	4b99      	ldr	r3, [pc, #612]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000818:	2254      	movs	r2, #84	@ 0x54
 800081a:	705a      	strb	r2, [r3, #1]
        txdata[2] = '+';
 800081c:	4b97      	ldr	r3, [pc, #604]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 800081e:	222b      	movs	r2, #43	@ 0x2b
 8000820:	709a      	strb	r2, [r3, #2]
        txdata[3] = 'C';
 8000822:	4b96      	ldr	r3, [pc, #600]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000824:	2243      	movs	r2, #67	@ 0x43
 8000826:	70da      	strb	r2, [r3, #3]
        txdata[4] = 'W';
 8000828:	4b94      	ldr	r3, [pc, #592]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 800082a:	2257      	movs	r2, #87	@ 0x57
 800082c:	711a      	strb	r2, [r3, #4]
        txdata[5] = 'J';
 800082e:	4b93      	ldr	r3, [pc, #588]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000830:	224a      	movs	r2, #74	@ 0x4a
 8000832:	715a      	strb	r2, [r3, #5]
        txdata[6] = 'A';
 8000834:	4b91      	ldr	r3, [pc, #580]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000836:	2241      	movs	r2, #65	@ 0x41
 8000838:	719a      	strb	r2, [r3, #6]
        txdata[7] = 'P';
 800083a:	4b90      	ldr	r3, [pc, #576]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 800083c:	2250      	movs	r2, #80	@ 0x50
 800083e:	71da      	strb	r2, [r3, #7]
        txdata[8] = '=';
 8000840:	4b8e      	ldr	r3, [pc, #568]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000842:	223d      	movs	r2, #61	@ 0x3d
 8000844:	721a      	strb	r2, [r3, #8]
        txdata[9] = '"';
 8000846:	4b8d      	ldr	r3, [pc, #564]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000848:	2222      	movs	r2, #34	@ 0x22
 800084a:	725a      	strb	r2, [r3, #9]
        txdata[10] = 'A';
 800084c:	4b8b      	ldr	r3, [pc, #556]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 800084e:	2241      	movs	r2, #65	@ 0x41
 8000850:	729a      	strb	r2, [r3, #10]
        txdata[11] = 'C';
 8000852:	4b8a      	ldr	r3, [pc, #552]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000854:	2243      	movs	r2, #67	@ 0x43
 8000856:	72da      	strb	r2, [r3, #11]
        txdata[12] = 'C';
 8000858:	4b88      	ldr	r3, [pc, #544]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 800085a:	2243      	movs	r2, #67	@ 0x43
 800085c:	731a      	strb	r2, [r3, #12]
        txdata[13] = 'E';
 800085e:	4b87      	ldr	r3, [pc, #540]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000860:	2245      	movs	r2, #69	@ 0x45
 8000862:	735a      	strb	r2, [r3, #13]
        txdata[14] = 'E';
 8000864:	4b85      	ldr	r3, [pc, #532]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000866:	2245      	movs	r2, #69	@ 0x45
 8000868:	739a      	strb	r2, [r3, #14]
        txdata[15] = 'D';
 800086a:	4b84      	ldr	r3, [pc, #528]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 800086c:	2244      	movs	r2, #68	@ 0x44
 800086e:	73da      	strb	r2, [r3, #15]
        txdata[16] = 'O';
 8000870:	4b82      	ldr	r3, [pc, #520]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000872:	224f      	movs	r2, #79	@ 0x4f
 8000874:	741a      	strb	r2, [r3, #16]
        txdata[17] = ' ';
 8000876:	4b81      	ldr	r3, [pc, #516]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000878:	2220      	movs	r2, #32
 800087a:	745a      	strb	r2, [r3, #17]
        txdata[18] = 'E';
 800087c:	4b7f      	ldr	r3, [pc, #508]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 800087e:	2245      	movs	r2, #69	@ 0x45
 8000880:	749a      	strb	r2, [r3, #18]
        txdata[19] = 'D';
 8000882:	4b7e      	ldr	r3, [pc, #504]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000884:	2244      	movs	r2, #68	@ 0x44
 8000886:	74da      	strb	r2, [r3, #19]
        txdata[20] = 'I';
 8000888:	4b7c      	ldr	r3, [pc, #496]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 800088a:	2249      	movs	r2, #73	@ 0x49
 800088c:	751a      	strb	r2, [r3, #20]
        txdata[21] = 'M';
 800088e:	4b7b      	ldr	r3, [pc, #492]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000890:	224d      	movs	r2, #77	@ 0x4d
 8000892:	755a      	strb	r2, [r3, #21]
        txdata[22] = 'A';
 8000894:	4b79      	ldr	r3, [pc, #484]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000896:	2241      	movs	r2, #65	@ 0x41
 8000898:	759a      	strb	r2, [r3, #22]
        txdata[23] = 'X';
 800089a:	4b78      	ldr	r3, [pc, #480]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 800089c:	2258      	movs	r2, #88	@ 0x58
 800089e:	75da      	strb	r2, [r3, #23]
        txdata[24] = '"';
 80008a0:	4b76      	ldr	r3, [pc, #472]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80008a2:	2222      	movs	r2, #34	@ 0x22
 80008a4:	761a      	strb	r2, [r3, #24]
        txdata[25] = ',';
 80008a6:	4b75      	ldr	r3, [pc, #468]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80008a8:	222c      	movs	r2, #44	@ 0x2c
 80008aa:	765a      	strb	r2, [r3, #25]
        txdata[26] = '"';
 80008ac:	4b73      	ldr	r3, [pc, #460]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80008ae:	2222      	movs	r2, #34	@ 0x22
 80008b0:	769a      	strb	r2, [r3, #26]
        txdata[27] = 'A';
 80008b2:	4b72      	ldr	r3, [pc, #456]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80008b4:	2241      	movs	r2, #65	@ 0x41
 80008b6:	76da      	strb	r2, [r3, #27]
        txdata[28] = 'C';
 80008b8:	4b70      	ldr	r3, [pc, #448]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80008ba:	2243      	movs	r2, #67	@ 0x43
 80008bc:	771a      	strb	r2, [r3, #28]
        txdata[29] = 'C';
 80008be:	4b6f      	ldr	r3, [pc, #444]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80008c0:	2243      	movs	r2, #67	@ 0x43
 80008c2:	775a      	strb	r2, [r3, #29]
        txdata[30] = 'E';
 80008c4:	4b6d      	ldr	r3, [pc, #436]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80008c6:	2245      	movs	r2, #69	@ 0x45
 80008c8:	779a      	strb	r2, [r3, #30]
        txdata[31] = 'E';
 80008ca:	4b6c      	ldr	r3, [pc, #432]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80008cc:	2245      	movs	r2, #69	@ 0x45
 80008ce:	77da      	strb	r2, [r3, #31]
        txdata[32] = 'D';
 80008d0:	4b6a      	ldr	r3, [pc, #424]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80008d2:	2244      	movs	r2, #68	@ 0x44
 80008d4:	f883 2020 	strb.w	r2, [r3, #32]
        txdata[33] = 'O';
 80008d8:	4b68      	ldr	r3, [pc, #416]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80008da:	224f      	movs	r2, #79	@ 0x4f
 80008dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        txdata[34] = '@';
 80008e0:	4b66      	ldr	r3, [pc, #408]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80008e2:	2240      	movs	r2, #64	@ 0x40
 80008e4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        txdata[35] = '1';
 80008e8:	4b64      	ldr	r3, [pc, #400]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80008ea:	2231      	movs	r2, #49	@ 0x31
 80008ec:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        txdata[36] = '2';
 80008f0:	4b62      	ldr	r3, [pc, #392]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80008f2:	2232      	movs	r2, #50	@ 0x32
 80008f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        txdata[37] = '3';
 80008f8:	4b60      	ldr	r3, [pc, #384]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80008fa:	2233      	movs	r2, #51	@ 0x33
 80008fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        txdata[38] = '"';
 8000900:	4b5e      	ldr	r3, [pc, #376]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000902:	2222      	movs	r2, #34	@ 0x22
 8000904:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
        txdata[39] = '\r';
 8000908:	4b5c      	ldr	r3, [pc, #368]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 800090a:	220d      	movs	r2, #13
 800090c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
        txdata[40] = '\n';
 8000910:	4b5a      	ldr	r3, [pc, #360]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000912:	220a      	movs	r2, #10
 8000914:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        HAL_UART_Transmit_IT(&hlpuart1, txdata, 41);
 8000918:	2229      	movs	r2, #41	@ 0x29
 800091a:	4958      	ldr	r1, [pc, #352]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 800091c:	4858      	ldr	r0, [pc, #352]	@ (8000a80 <Send_WifiCmd+0x5c4>)
 800091e:	f002 fa3d 	bl	8002d9c <HAL_UART_Transmit_IT>
        rxcode = 7;
 8000922:	4b58      	ldr	r3, [pc, #352]	@ (8000a84 <Send_WifiCmd+0x5c8>)
 8000924:	2207      	movs	r2, #7
 8000926:	701a      	strb	r2, [r3, #0]
        cmd = 15;
 8000928:	4b57      	ldr	r3, [pc, #348]	@ (8000a88 <Send_WifiCmd+0x5cc>)
 800092a:	220f      	movs	r2, #15
 800092c:	701a      	strb	r2, [r3, #0]
        break;
 800092e:	e286      	b.n	8000e3e <Send_WifiCmd+0x982>

    case 15:
        if (++Timer > 3) {
 8000930:	4b56      	ldr	r3, [pc, #344]	@ (8000a8c <Send_WifiCmd+0x5d0>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	b2da      	uxtb	r2, r3
 8000938:	4b54      	ldr	r3, [pc, #336]	@ (8000a8c <Send_WifiCmd+0x5d0>)
 800093a:	701a      	strb	r2, [r3, #0]
 800093c:	4b53      	ldr	r3, [pc, #332]	@ (8000a8c <Send_WifiCmd+0x5d0>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b03      	cmp	r3, #3
 8000942:	f240 8277 	bls.w	8000e34 <Send_WifiCmd+0x978>
            Timer = 0;
 8000946:	4b51      	ldr	r3, [pc, #324]	@ (8000a8c <Send_WifiCmd+0x5d0>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
        }
        break;
 800094c:	e272      	b.n	8000e34 <Send_WifiCmd+0x978>

    case 16:
        txdata[0] = 'A';
 800094e:	4b4b      	ldr	r3, [pc, #300]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000950:	2241      	movs	r2, #65	@ 0x41
 8000952:	701a      	strb	r2, [r3, #0]
        txdata[1] = 'T';
 8000954:	4b49      	ldr	r3, [pc, #292]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000956:	2254      	movs	r2, #84	@ 0x54
 8000958:	705a      	strb	r2, [r3, #1]
        txdata[2] = '+';
 800095a:	4b48      	ldr	r3, [pc, #288]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 800095c:	222b      	movs	r2, #43	@ 0x2b
 800095e:	709a      	strb	r2, [r3, #2]
        txdata[3] = 'C';
 8000960:	4b46      	ldr	r3, [pc, #280]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000962:	2243      	movs	r2, #67	@ 0x43
 8000964:	70da      	strb	r2, [r3, #3]
        txdata[4] = 'I';
 8000966:	4b45      	ldr	r3, [pc, #276]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000968:	2249      	movs	r2, #73	@ 0x49
 800096a:	711a      	strb	r2, [r3, #4]
        txdata[5] = 'P';
 800096c:	4b43      	ldr	r3, [pc, #268]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 800096e:	2250      	movs	r2, #80	@ 0x50
 8000970:	715a      	strb	r2, [r3, #5]
        txdata[6] = 'S';
 8000972:	4b42      	ldr	r3, [pc, #264]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000974:	2253      	movs	r2, #83	@ 0x53
 8000976:	719a      	strb	r2, [r3, #6]
        txdata[7] = 'T';
 8000978:	4b40      	ldr	r3, [pc, #256]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 800097a:	2254      	movs	r2, #84	@ 0x54
 800097c:	71da      	strb	r2, [r3, #7]
        txdata[8] = 'A';
 800097e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000980:	2241      	movs	r2, #65	@ 0x41
 8000982:	721a      	strb	r2, [r3, #8]
        txdata[9] = 'R';
 8000984:	4b3d      	ldr	r3, [pc, #244]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000986:	2252      	movs	r2, #82	@ 0x52
 8000988:	725a      	strb	r2, [r3, #9]
        txdata[10] = 'T';
 800098a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 800098c:	2254      	movs	r2, #84	@ 0x54
 800098e:	729a      	strb	r2, [r3, #10]
        txdata[11] = '=';
 8000990:	4b3a      	ldr	r3, [pc, #232]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000992:	223d      	movs	r2, #61	@ 0x3d
 8000994:	72da      	strb	r2, [r3, #11]
        txdata[12] = '"';
 8000996:	4b39      	ldr	r3, [pc, #228]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000998:	2222      	movs	r2, #34	@ 0x22
 800099a:	731a      	strb	r2, [r3, #12]
        txdata[13] = 'T';
 800099c:	4b37      	ldr	r3, [pc, #220]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 800099e:	2254      	movs	r2, #84	@ 0x54
 80009a0:	735a      	strb	r2, [r3, #13]
        txdata[14] = 'C';
 80009a2:	4b36      	ldr	r3, [pc, #216]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80009a4:	2243      	movs	r2, #67	@ 0x43
 80009a6:	739a      	strb	r2, [r3, #14]
        txdata[15] = 'P';
 80009a8:	4b34      	ldr	r3, [pc, #208]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80009aa:	2250      	movs	r2, #80	@ 0x50
 80009ac:	73da      	strb	r2, [r3, #15]
        txdata[16] = '"';
 80009ae:	4b33      	ldr	r3, [pc, #204]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80009b0:	2222      	movs	r2, #34	@ 0x22
 80009b2:	741a      	strb	r2, [r3, #16]
        txdata[17] = ',';
 80009b4:	4b31      	ldr	r3, [pc, #196]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80009b6:	222c      	movs	r2, #44	@ 0x2c
 80009b8:	745a      	strb	r2, [r3, #17]
        txdata[18] = '"';
 80009ba:	4b30      	ldr	r3, [pc, #192]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80009bc:	2222      	movs	r2, #34	@ 0x22
 80009be:	749a      	strb	r2, [r3, #18]
        txdata[19] = '1';
 80009c0:	4b2e      	ldr	r3, [pc, #184]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80009c2:	2231      	movs	r2, #49	@ 0x31
 80009c4:	74da      	strb	r2, [r3, #19]
        txdata[20] = '9';
 80009c6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80009c8:	2239      	movs	r2, #57	@ 0x39
 80009ca:	751a      	strb	r2, [r3, #20]
        txdata[21] = '2';
 80009cc:	4b2b      	ldr	r3, [pc, #172]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80009ce:	2232      	movs	r2, #50	@ 0x32
 80009d0:	755a      	strb	r2, [r3, #21]
        txdata[22] = '.';
 80009d2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80009d4:	222e      	movs	r2, #46	@ 0x2e
 80009d6:	759a      	strb	r2, [r3, #22]
        txdata[23] = '1';
 80009d8:	4b28      	ldr	r3, [pc, #160]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80009da:	2231      	movs	r2, #49	@ 0x31
 80009dc:	75da      	strb	r2, [r3, #23]
        txdata[24] = '6';
 80009de:	4b27      	ldr	r3, [pc, #156]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80009e0:	2236      	movs	r2, #54	@ 0x36
 80009e2:	761a      	strb	r2, [r3, #24]
        txdata[25] = '8';
 80009e4:	4b25      	ldr	r3, [pc, #148]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80009e6:	2238      	movs	r2, #56	@ 0x38
 80009e8:	765a      	strb	r2, [r3, #25]
        txdata[26] = '.';
 80009ea:	4b24      	ldr	r3, [pc, #144]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80009ec:	222e      	movs	r2, #46	@ 0x2e
 80009ee:	769a      	strb	r2, [r3, #26]
        txdata[27] = '0';
 80009f0:	4b22      	ldr	r3, [pc, #136]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80009f2:	2230      	movs	r2, #48	@ 0x30
 80009f4:	76da      	strb	r2, [r3, #27]
        txdata[28] = '.';
 80009f6:	4b21      	ldr	r3, [pc, #132]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80009f8:	222e      	movs	r2, #46	@ 0x2e
 80009fa:	771a      	strb	r2, [r3, #28]
        txdata[29] = '8';
 80009fc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 80009fe:	2238      	movs	r2, #56	@ 0x38
 8000a00:	775a      	strb	r2, [r3, #29]
        txdata[30] = '4';
 8000a02:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000a04:	2234      	movs	r2, #52	@ 0x34
 8000a06:	779a      	strb	r2, [r3, #30]
        txdata[31] = '"';
 8000a08:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000a0a:	2222      	movs	r2, #34	@ 0x22
 8000a0c:	77da      	strb	r2, [r3, #31]
        txdata[32] = ',';
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000a10:	222c      	movs	r2, #44	@ 0x2c
 8000a12:	f883 2020 	strb.w	r2, [r3, #32]
        txdata[33] = '9';
 8000a16:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000a18:	2239      	movs	r2, #57	@ 0x39
 8000a1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        txdata[34] = '0';
 8000a1e:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000a20:	2230      	movs	r2, #48	@ 0x30
 8000a22:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        txdata[35] = '0';
 8000a26:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000a28:	2230      	movs	r2, #48	@ 0x30
 8000a2a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        txdata[36] = '1';
 8000a2e:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000a30:	2231      	movs	r2, #49	@ 0x31
 8000a32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        txdata[37] = '\r';
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000a38:	220d      	movs	r2, #13
 8000a3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        txdata[38] = '\n';
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000a40:	220a      	movs	r2, #10
 8000a42:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
        HAL_UART_Transmit_IT(&hlpuart1, txdata, 39);
 8000a46:	2227      	movs	r2, #39	@ 0x27
 8000a48:	490c      	ldr	r1, [pc, #48]	@ (8000a7c <Send_WifiCmd+0x5c0>)
 8000a4a:	480d      	ldr	r0, [pc, #52]	@ (8000a80 <Send_WifiCmd+0x5c4>)
 8000a4c:	f002 f9a6 	bl	8002d9c <HAL_UART_Transmit_IT>
        rxcode = 8;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <Send_WifiCmd+0x5c8>)
 8000a52:	2208      	movs	r2, #8
 8000a54:	701a      	strb	r2, [r3, #0]
        cmd = 17;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <Send_WifiCmd+0x5cc>)
 8000a58:	2211      	movs	r2, #17
 8000a5a:	701a      	strb	r2, [r3, #0]
        break;
 8000a5c:	e1ef      	b.n	8000e3e <Send_WifiCmd+0x982>

    case 17:
        if (++Timer > 6) {
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <Send_WifiCmd+0x5d0>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	3301      	adds	r3, #1
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <Send_WifiCmd+0x5d0>)
 8000a68:	701a      	strb	r2, [r3, #0]
 8000a6a:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <Send_WifiCmd+0x5d0>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b06      	cmp	r3, #6
 8000a70:	f240 81e2 	bls.w	8000e38 <Send_WifiCmd+0x97c>
            Timer = 0;
 8000a74:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <Send_WifiCmd+0x5d0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000a7a:	e1dd      	b.n	8000e38 <Send_WifiCmd+0x97c>
 8000a7c:	20000030 	.word	0x20000030
 8000a80:	200000f8 	.word	0x200000f8
 8000a84:	2000002c 	.word	0x2000002c
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	2000002d 	.word	0x2000002d

    case 18:
        txdata[0] = 'A';
 8000a90:	4b23      	ldr	r3, [pc, #140]	@ (8000b20 <Send_WifiCmd+0x664>)
 8000a92:	2241      	movs	r2, #65	@ 0x41
 8000a94:	701a      	strb	r2, [r3, #0]
        txdata[1] = 'T';
 8000a96:	4b22      	ldr	r3, [pc, #136]	@ (8000b20 <Send_WifiCmd+0x664>)
 8000a98:	2254      	movs	r2, #84	@ 0x54
 8000a9a:	705a      	strb	r2, [r3, #1]
        txdata[2] = '+';
 8000a9c:	4b20      	ldr	r3, [pc, #128]	@ (8000b20 <Send_WifiCmd+0x664>)
 8000a9e:	222b      	movs	r2, #43	@ 0x2b
 8000aa0:	709a      	strb	r2, [r3, #2]
        txdata[3] = 'C';
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b20 <Send_WifiCmd+0x664>)
 8000aa4:	2243      	movs	r2, #67	@ 0x43
 8000aa6:	70da      	strb	r2, [r3, #3]
        txdata[4] = 'I';
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b20 <Send_WifiCmd+0x664>)
 8000aaa:	2249      	movs	r2, #73	@ 0x49
 8000aac:	711a      	strb	r2, [r3, #4]
        txdata[5] = 'P';
 8000aae:	4b1c      	ldr	r3, [pc, #112]	@ (8000b20 <Send_WifiCmd+0x664>)
 8000ab0:	2250      	movs	r2, #80	@ 0x50
 8000ab2:	715a      	strb	r2, [r3, #5]
        txdata[6] = 'S';
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b20 <Send_WifiCmd+0x664>)
 8000ab6:	2253      	movs	r2, #83	@ 0x53
 8000ab8:	719a      	strb	r2, [r3, #6]
        txdata[7] = 'E';
 8000aba:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <Send_WifiCmd+0x664>)
 8000abc:	2245      	movs	r2, #69	@ 0x45
 8000abe:	71da      	strb	r2, [r3, #7]
        txdata[8] = 'N';
 8000ac0:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <Send_WifiCmd+0x664>)
 8000ac2:	224e      	movs	r2, #78	@ 0x4e
 8000ac4:	721a      	strb	r2, [r3, #8]
        txdata[9] = 'D';
 8000ac6:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <Send_WifiCmd+0x664>)
 8000ac8:	2244      	movs	r2, #68	@ 0x44
 8000aca:	725a      	strb	r2, [r3, #9]
        txdata[10] = '=';
 8000acc:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <Send_WifiCmd+0x664>)
 8000ace:	223d      	movs	r2, #61	@ 0x3d
 8000ad0:	729a      	strb	r2, [r3, #10]
        txdata[11] = '9';
 8000ad2:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <Send_WifiCmd+0x664>)
 8000ad4:	2239      	movs	r2, #57	@ 0x39
 8000ad6:	72da      	strb	r2, [r3, #11]
        txdata[12] = '8';
 8000ad8:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <Send_WifiCmd+0x664>)
 8000ada:	2238      	movs	r2, #56	@ 0x38
 8000adc:	731a      	strb	r2, [r3, #12]
        txdata[13] = '\r';
 8000ade:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <Send_WifiCmd+0x664>)
 8000ae0:	220d      	movs	r2, #13
 8000ae2:	735a      	strb	r2, [r3, #13]
        txdata[14] = '\n';
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <Send_WifiCmd+0x664>)
 8000ae6:	220a      	movs	r2, #10
 8000ae8:	739a      	strb	r2, [r3, #14]
        HAL_UART_Transmit_IT(&hlpuart1, txdata, 15);
 8000aea:	220f      	movs	r2, #15
 8000aec:	490c      	ldr	r1, [pc, #48]	@ (8000b20 <Send_WifiCmd+0x664>)
 8000aee:	480d      	ldr	r0, [pc, #52]	@ (8000b24 <Send_WifiCmd+0x668>)
 8000af0:	f002 f954 	bl	8002d9c <HAL_UART_Transmit_IT>
        rxcode = 9;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <Send_WifiCmd+0x66c>)
 8000af6:	2209      	movs	r2, #9
 8000af8:	701a      	strb	r2, [r3, #0]
        cmd = 19;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <Send_WifiCmd+0x670>)
 8000afc:	2213      	movs	r2, #19
 8000afe:	701a      	strb	r2, [r3, #0]
        break;
 8000b00:	e19d      	b.n	8000e3e <Send_WifiCmd+0x982>

    case 19:
        if (++Timer > 6) {
 8000b02:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <Send_WifiCmd+0x674>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	3301      	adds	r3, #1
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <Send_WifiCmd+0x674>)
 8000b0c:	701a      	strb	r2, [r3, #0]
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <Send_WifiCmd+0x674>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b06      	cmp	r3, #6
 8000b14:	f240 8192 	bls.w	8000e3c <Send_WifiCmd+0x980>
            Timer = 0;
 8000b18:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <Send_WifiCmd+0x674>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000b1e:	e18d      	b.n	8000e3c <Send_WifiCmd+0x980>
 8000b20:	20000030 	.word	0x20000030
 8000b24:	200000f8 	.word	0x200000f8
 8000b28:	2000002c 	.word	0x2000002c
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	2000002d 	.word	0x2000002d

    case 20:
        txdata[0] = 'G';
 8000b34:	4bc3      	ldr	r3, [pc, #780]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000b36:	2247      	movs	r2, #71	@ 0x47
 8000b38:	701a      	strb	r2, [r3, #0]
        txdata[1] = 'E';
 8000b3a:	4bc2      	ldr	r3, [pc, #776]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000b3c:	2245      	movs	r2, #69	@ 0x45
 8000b3e:	705a      	strb	r2, [r3, #1]
        txdata[2] = 'T';
 8000b40:	4bc0      	ldr	r3, [pc, #768]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000b42:	2254      	movs	r2, #84	@ 0x54
 8000b44:	709a      	strb	r2, [r3, #2]
        txdata[3] = ' ';
 8000b46:	4bbf      	ldr	r3, [pc, #764]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000b48:	2220      	movs	r2, #32
 8000b4a:	70da      	strb	r2, [r3, #3]
        txdata[4] = '/';
 8000b4c:	4bbd      	ldr	r3, [pc, #756]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000b4e:	222f      	movs	r2, #47	@ 0x2f
 8000b50:	711a      	strb	r2, [r3, #4]
        txdata[5] = 'a';
 8000b52:	4bbc      	ldr	r3, [pc, #752]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000b54:	2261      	movs	r2, #97	@ 0x61
 8000b56:	715a      	strb	r2, [r3, #5]
        txdata[6] = 'p';
 8000b58:	4bba      	ldr	r3, [pc, #744]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000b5a:	2270      	movs	r2, #112	@ 0x70
 8000b5c:	719a      	strb	r2, [r3, #6]
        txdata[7] = 'i';
 8000b5e:	4bb9      	ldr	r3, [pc, #740]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000b60:	2269      	movs	r2, #105	@ 0x69
 8000b62:	71da      	strb	r2, [r3, #7]
        txdata[8] = '/';
 8000b64:	4bb7      	ldr	r3, [pc, #732]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000b66:	222f      	movs	r2, #47	@ 0x2f
 8000b68:	721a      	strb	r2, [r3, #8]
        txdata[9] = 'v';
 8000b6a:	4bb6      	ldr	r3, [pc, #728]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000b6c:	2276      	movs	r2, #118	@ 0x76
 8000b6e:	725a      	strb	r2, [r3, #9]
        txdata[10] = '1';
 8000b70:	4bb4      	ldr	r3, [pc, #720]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000b72:	2231      	movs	r2, #49	@ 0x31
 8000b74:	729a      	strb	r2, [r3, #10]
        txdata[11] = '/';
 8000b76:	4bb3      	ldr	r3, [pc, #716]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000b78:	222f      	movs	r2, #47	@ 0x2f
 8000b7a:	72da      	strb	r2, [r3, #11]
        txdata[12] = 'd';
 8000b7c:	4bb1      	ldr	r3, [pc, #708]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000b7e:	2264      	movs	r2, #100	@ 0x64
 8000b80:	731a      	strb	r2, [r3, #12]
        txdata[13] = 'a';
 8000b82:	4bb0      	ldr	r3, [pc, #704]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000b84:	2261      	movs	r2, #97	@ 0x61
 8000b86:	735a      	strb	r2, [r3, #13]
        txdata[14] = 's';
 8000b88:	4bae      	ldr	r3, [pc, #696]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000b8a:	2273      	movs	r2, #115	@ 0x73
 8000b8c:	739a      	strb	r2, [r3, #14]
        txdata[15] = 'h';
 8000b8e:	4bad      	ldr	r3, [pc, #692]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000b90:	2268      	movs	r2, #104	@ 0x68
 8000b92:	73da      	strb	r2, [r3, #15]
        txdata[16] = 'b';
 8000b94:	4bab      	ldr	r3, [pc, #684]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000b96:	2262      	movs	r2, #98	@ 0x62
 8000b98:	741a      	strb	r2, [r3, #16]
        txdata[17] = 'o';
 8000b9a:	4baa      	ldr	r3, [pc, #680]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000b9c:	226f      	movs	r2, #111	@ 0x6f
 8000b9e:	745a      	strb	r2, [r3, #17]
        txdata[18] = 'a';
 8000ba0:	4ba8      	ldr	r3, [pc, #672]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000ba2:	2261      	movs	r2, #97	@ 0x61
 8000ba4:	749a      	strb	r2, [r3, #18]
        txdata[19] = 'r';
 8000ba6:	4ba7      	ldr	r3, [pc, #668]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000ba8:	2272      	movs	r2, #114	@ 0x72
 8000baa:	74da      	strb	r2, [r3, #19]
        txdata[20] = 'd';
 8000bac:	4ba5      	ldr	r3, [pc, #660]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000bae:	2264      	movs	r2, #100	@ 0x64
 8000bb0:	751a      	strb	r2, [r3, #20]
        txdata[21] = '/';
 8000bb2:	4ba4      	ldr	r3, [pc, #656]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000bb4:	222f      	movs	r2, #47	@ 0x2f
 8000bb6:	755a      	strb	r2, [r3, #21]
        txdata[22] = '1';
 8000bb8:	4ba2      	ldr	r3, [pc, #648]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000bba:	2231      	movs	r2, #49	@ 0x31
 8000bbc:	759a      	strb	r2, [r3, #22]
        txdata[23] = '?';
 8000bbe:	4ba1      	ldr	r3, [pc, #644]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000bc0:	223f      	movs	r2, #63	@ 0x3f
 8000bc2:	75da      	strb	r2, [r3, #23]
        txdata[24] = 't';
 8000bc4:	4b9f      	ldr	r3, [pc, #636]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000bc6:	2274      	movs	r2, #116	@ 0x74
 8000bc8:	761a      	strb	r2, [r3, #24]
        txdata[25] = '=';
 8000bca:	4b9e      	ldr	r3, [pc, #632]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000bcc:	223d      	movs	r2, #61	@ 0x3d
 8000bce:	765a      	strb	r2, [r3, #25]
        txdata[26] = '0';
 8000bd0:	4b9c      	ldr	r3, [pc, #624]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000bd2:	2230      	movs	r2, #48	@ 0x30
 8000bd4:	769a      	strb	r2, [r3, #26]
        txdata[27] = '1';
 8000bd6:	4b9b      	ldr	r3, [pc, #620]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000bd8:	2231      	movs	r2, #49	@ 0x31
 8000bda:	76da      	strb	r2, [r3, #27]
        txdata[28] = '2';
 8000bdc:	4b99      	ldr	r3, [pc, #612]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000bde:	2232      	movs	r2, #50	@ 0x32
 8000be0:	771a      	strb	r2, [r3, #28]
        txdata[29] = '0';
 8000be2:	4b98      	ldr	r3, [pc, #608]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000be4:	2230      	movs	r2, #48	@ 0x30
 8000be6:	775a      	strb	r2, [r3, #29]
        txdata[30] = '&';
 8000be8:	4b96      	ldr	r3, [pc, #600]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000bea:	2226      	movs	r2, #38	@ 0x26
 8000bec:	779a      	strb	r2, [r3, #30]
        txdata[31] = 'h';
 8000bee:	4b95      	ldr	r3, [pc, #596]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000bf0:	2268      	movs	r2, #104	@ 0x68
 8000bf2:	77da      	strb	r2, [r3, #31]
        txdata[32] = '=';
 8000bf4:	4b93      	ldr	r3, [pc, #588]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000bf6:	223d      	movs	r2, #61	@ 0x3d
 8000bf8:	f883 2020 	strb.w	r2, [r3, #32]
        txdata[33] = '0';
 8000bfc:	4b91      	ldr	r3, [pc, #580]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000bfe:	2230      	movs	r2, #48	@ 0x30
 8000c00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        txdata[34] = '0';
 8000c04:	4b8f      	ldr	r3, [pc, #572]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000c06:	2230      	movs	r2, #48	@ 0x30
 8000c08:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        txdata[35] = '2';
 8000c0c:	4b8d      	ldr	r3, [pc, #564]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000c0e:	2232      	movs	r2, #50	@ 0x32
 8000c10:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        txdata[36] = '0';
 8000c14:	4b8b      	ldr	r3, [pc, #556]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000c16:	2230      	movs	r2, #48	@ 0x30
 8000c18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        txdata[37] = '&';
 8000c1c:	4b89      	ldr	r3, [pc, #548]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000c1e:	2226      	movs	r2, #38	@ 0x26
 8000c20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        txdata[38] = 'w';
 8000c24:	4b87      	ldr	r3, [pc, #540]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000c26:	2277      	movs	r2, #119	@ 0x77
 8000c28:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
        txdata[39] = '=';
 8000c2c:	4b85      	ldr	r3, [pc, #532]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000c2e:	223d      	movs	r2, #61	@ 0x3d
 8000c30:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
        txdata[40] = '0';
 8000c34:	4b83      	ldr	r3, [pc, #524]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000c36:	2230      	movs	r2, #48	@ 0x30
 8000c38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        txdata[41] = '&';
 8000c3c:	4b81      	ldr	r3, [pc, #516]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000c3e:	2226      	movs	r2, #38	@ 0x26
 8000c40:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        txdata[42] = 'e';
 8000c44:	4b7f      	ldr	r3, [pc, #508]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000c46:	2265      	movs	r2, #101	@ 0x65
 8000c48:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        txdata[43] = 'b';
 8000c4c:	4b7d      	ldr	r3, [pc, #500]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000c4e:	2262      	movs	r2, #98	@ 0x62
 8000c50:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
        txdata[44] = '=';
 8000c54:	4b7b      	ldr	r3, [pc, #492]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000c56:	223d      	movs	r2, #61	@ 0x3d
 8000c58:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
        txdata[45] = '0';
 8000c5c:	4b79      	ldr	r3, [pc, #484]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000c5e:	2230      	movs	r2, #48	@ 0x30
 8000c60:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        txdata[46] = '&';
 8000c64:	4b77      	ldr	r3, [pc, #476]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000c66:	2226      	movs	r2, #38	@ 0x26
 8000c68:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
        txdata[47] = 'u';
 8000c6c:	4b75      	ldr	r3, [pc, #468]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000c6e:	2275      	movs	r2, #117	@ 0x75
 8000c70:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        txdata[48] = 'p';
 8000c74:	4b73      	ldr	r3, [pc, #460]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000c76:	2270      	movs	r2, #112	@ 0x70
 8000c78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        txdata[49] = 's';
 8000c7c:	4b71      	ldr	r3, [pc, #452]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000c7e:	2273      	movs	r2, #115	@ 0x73
 8000c80:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
        txdata[50] = '=';
 8000c84:	4b6f      	ldr	r3, [pc, #444]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000c86:	223d      	movs	r2, #61	@ 0x3d
 8000c88:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
        txdata[51] = '0';
 8000c8c:	4b6d      	ldr	r3, [pc, #436]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000c8e:	2230      	movs	r2, #48	@ 0x30
 8000c90:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        txdata[52] = '&';
 8000c94:	4b6b      	ldr	r3, [pc, #428]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000c96:	2226      	movs	r2, #38	@ 0x26
 8000c98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        txdata[53] = 'x';
 8000c9c:	4b69      	ldr	r3, [pc, #420]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000c9e:	2278      	movs	r2, #120	@ 0x78
 8000ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        txdata[54] = '=';
 8000ca4:	4b67      	ldr	r3, [pc, #412]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000ca6:	223d      	movs	r2, #61	@ 0x3d
 8000ca8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
        txdata[55] = '0';
 8000cac:	4b65      	ldr	r3, [pc, #404]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000cae:	2230      	movs	r2, #48	@ 0x30
 8000cb0:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
        txdata[56] = '&';
 8000cb4:	4b63      	ldr	r3, [pc, #396]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000cb6:	2226      	movs	r2, #38	@ 0x26
 8000cb8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        txdata[57] = 'y';
 8000cbc:	4b61      	ldr	r3, [pc, #388]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000cbe:	2279      	movs	r2, #121	@ 0x79
 8000cc0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        txdata[58] = '=';
 8000cc4:	4b5f      	ldr	r3, [pc, #380]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000cc6:	223d      	movs	r2, #61	@ 0x3d
 8000cc8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        txdata[59] = '0';
 8000ccc:	4b5d      	ldr	r3, [pc, #372]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000cce:	2230      	movs	r2, #48	@ 0x30
 8000cd0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        txdata[60] = ' ';
 8000cd4:	4b5b      	ldr	r3, [pc, #364]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000cd6:	2220      	movs	r2, #32
 8000cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        txdata[61] = 'H';
 8000cdc:	4b59      	ldr	r3, [pc, #356]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000cde:	2248      	movs	r2, #72	@ 0x48
 8000ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        txdata[62] = 'T';
 8000ce4:	4b57      	ldr	r3, [pc, #348]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000ce6:	2254      	movs	r2, #84	@ 0x54
 8000ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        txdata[63] = 'T';
 8000cec:	4b55      	ldr	r3, [pc, #340]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000cee:	2254      	movs	r2, #84	@ 0x54
 8000cf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        txdata[64] = 'P';
 8000cf4:	4b53      	ldr	r3, [pc, #332]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000cf6:	2250      	movs	r2, #80	@ 0x50
 8000cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        txdata[65] = '/';
 8000cfc:	4b51      	ldr	r3, [pc, #324]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000cfe:	222f      	movs	r2, #47	@ 0x2f
 8000d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        txdata[66] = '1';
 8000d04:	4b4f      	ldr	r3, [pc, #316]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000d06:	2231      	movs	r2, #49	@ 0x31
 8000d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        txdata[67] = '.';
 8000d0c:	4b4d      	ldr	r3, [pc, #308]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000d0e:	222e      	movs	r2, #46	@ 0x2e
 8000d10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        txdata[68] = '0';
 8000d14:	4b4b      	ldr	r3, [pc, #300]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000d16:	2230      	movs	r2, #48	@ 0x30
 8000d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        txdata[69] = '\r';
 8000d1c:	4b49      	ldr	r3, [pc, #292]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000d1e:	220d      	movs	r2, #13
 8000d20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        txdata[70] = '\n';
 8000d24:	4b47      	ldr	r3, [pc, #284]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000d26:	220a      	movs	r2, #10
 8000d28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
        txdata[71] = '\r';
 8000d2c:	4b45      	ldr	r3, [pc, #276]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000d2e:	220d      	movs	r2, #13
 8000d30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
        txdata[72] = '\n';
 8000d34:	4b43      	ldr	r3, [pc, #268]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000d36:	220a      	movs	r2, #10
 8000d38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        txdata[73] = 'H';
 8000d3c:	4b41      	ldr	r3, [pc, #260]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000d3e:	2248      	movs	r2, #72	@ 0x48
 8000d40:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
        txdata[74] = 'O';
 8000d44:	4b3f      	ldr	r3, [pc, #252]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000d46:	224f      	movs	r2, #79	@ 0x4f
 8000d48:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
        txdata[75] = 'S';
 8000d4c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000d4e:	2253      	movs	r2, #83	@ 0x53
 8000d50:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
        txdata[76] = 'T';
 8000d54:	4b3b      	ldr	r3, [pc, #236]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000d56:	2254      	movs	r2, #84	@ 0x54
 8000d58:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        txdata[77] = ':';
 8000d5c:	4b39      	ldr	r3, [pc, #228]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000d5e:	223a      	movs	r2, #58	@ 0x3a
 8000d60:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        txdata[78] = ' ';
 8000d64:	4b37      	ldr	r3, [pc, #220]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000d66:	2220      	movs	r2, #32
 8000d68:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
        txdata[79] = '1';
 8000d6c:	4b35      	ldr	r3, [pc, #212]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000d6e:	2231      	movs	r2, #49	@ 0x31
 8000d70:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
        txdata[80] = '9';
 8000d74:	4b33      	ldr	r3, [pc, #204]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000d76:	2239      	movs	r2, #57	@ 0x39
 8000d78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        txdata[81] = '2';
 8000d7c:	4b31      	ldr	r3, [pc, #196]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000d7e:	2232      	movs	r2, #50	@ 0x32
 8000d80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        txdata[82] = '.';
 8000d84:	4b2f      	ldr	r3, [pc, #188]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000d86:	222e      	movs	r2, #46	@ 0x2e
 8000d88:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        txdata[83] = '1';
 8000d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000d8e:	2231      	movs	r2, #49	@ 0x31
 8000d90:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
        txdata[84] = '6';
 8000d94:	4b2b      	ldr	r3, [pc, #172]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000d96:	2236      	movs	r2, #54	@ 0x36
 8000d98:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        txdata[85] = '8';
 8000d9c:	4b29      	ldr	r3, [pc, #164]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000d9e:	2238      	movs	r2, #56	@ 0x38
 8000da0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
        txdata[86] = '.';
 8000da4:	4b27      	ldr	r3, [pc, #156]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000da6:	222e      	movs	r2, #46	@ 0x2e
 8000da8:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
        txdata[87] = '0';
 8000dac:	4b25      	ldr	r3, [pc, #148]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000dae:	2230      	movs	r2, #48	@ 0x30
 8000db0:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
        txdata[88] = '.';
 8000db4:	4b23      	ldr	r3, [pc, #140]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000db6:	222e      	movs	r2, #46	@ 0x2e
 8000db8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        txdata[89] = '8';
 8000dbc:	4b21      	ldr	r3, [pc, #132]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000dbe:	2238      	movs	r2, #56	@ 0x38
 8000dc0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        txdata[90] = '4';
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000dc6:	2234      	movs	r2, #52	@ 0x34
 8000dc8:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
        txdata[91] = ':';
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000dce:	223a      	movs	r2, #58	@ 0x3a
 8000dd0:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
        txdata[92] = '9';
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000dd6:	2239      	movs	r2, #57	@ 0x39
 8000dd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        txdata[93] = '0';
 8000ddc:	4b19      	ldr	r3, [pc, #100]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000dde:	2230      	movs	r2, #48	@ 0x30
 8000de0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        txdata[94] = '0';
 8000de4:	4b17      	ldr	r3, [pc, #92]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000de6:	2230      	movs	r2, #48	@ 0x30
 8000de8:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
        txdata[95] = '1';
 8000dec:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000dee:	2231      	movs	r2, #49	@ 0x31
 8000df0:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
        txdata[96] = '\r';
 8000df4:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000df6:	220d      	movs	r2, #13
 8000df8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
        txdata[97] = '\n';
 8000dfc:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000dfe:	220a      	movs	r2, #10
 8000e00:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
        HAL_UART_Transmit_IT(&hlpuart1, txdata, 98);
 8000e04:	2262      	movs	r2, #98	@ 0x62
 8000e06:	490f      	ldr	r1, [pc, #60]	@ (8000e44 <Send_WifiCmd+0x988>)
 8000e08:	480f      	ldr	r0, [pc, #60]	@ (8000e48 <Send_WifiCmd+0x98c>)
 8000e0a:	f001 ffc7 	bl	8002d9c <HAL_UART_Transmit_IT>
        rxcode = 10;
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <Send_WifiCmd+0x990>)
 8000e10:	220a      	movs	r2, #10
 8000e12:	701a      	strb	r2, [r3, #0]
        cmd = 16;
 8000e14:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <Send_WifiCmd+0x994>)
 8000e16:	2210      	movs	r2, #16
 8000e18:	701a      	strb	r2, [r3, #0]
        break;
 8000e1a:	e010      	b.n	8000e3e <Send_WifiCmd+0x982>
        break;
 8000e1c:	bf00      	nop
 8000e1e:	e00e      	b.n	8000e3e <Send_WifiCmd+0x982>
        break;
 8000e20:	bf00      	nop
 8000e22:	e00c      	b.n	8000e3e <Send_WifiCmd+0x982>
        break;
 8000e24:	bf00      	nop
 8000e26:	e00a      	b.n	8000e3e <Send_WifiCmd+0x982>
        break;
 8000e28:	bf00      	nop
 8000e2a:	e008      	b.n	8000e3e <Send_WifiCmd+0x982>
        break;
 8000e2c:	bf00      	nop
 8000e2e:	e006      	b.n	8000e3e <Send_WifiCmd+0x982>
        break;
 8000e30:	bf00      	nop
 8000e32:	e004      	b.n	8000e3e <Send_WifiCmd+0x982>
        break;
 8000e34:	bf00      	nop
 8000e36:	e002      	b.n	8000e3e <Send_WifiCmd+0x982>
        break;
 8000e38:	bf00      	nop
 8000e3a:	e000      	b.n	8000e3e <Send_WifiCmd+0x982>
        break;
 8000e3c:	bf00      	nop
    }
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000030 	.word	0x20000030
 8000e48:	200000f8 	.word	0x200000f8
 8000e4c:	2000002c 	.word	0x2000002c
 8000e50:	20000000 	.word	0x20000000

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e58:	f000 f9bf 	bl	80011da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5c:	f000 f814 	bl	8000e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e60:	f000 f884 	bl	8000f6c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000e64:	f000 f856 	bl	8000f14 <MX_LPUART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	4805      	ldr	r0, [pc, #20]	@ (8000e84 <main+0x30>)
 8000e6e:	f000 fd57 	bl	8001920 <HAL_GPIO_WritePin>


  while (1)
  {
    /* USER CODE END WHILE */
	    HAL_Delay(3000);
 8000e72:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000e76:	f000 fa25 	bl	80012c4 <HAL_Delay>
	    /*
	    send_command();
	    receive_command();
	    */

	    Send_WifiCmd();
 8000e7a:	f7ff fb1f 	bl	80004bc <Send_WifiCmd>
	    HAL_Delay(3000);
 8000e7e:	bf00      	nop
 8000e80:	e7f7      	b.n	8000e72 <main+0x1e>
 8000e82:	bf00      	nop
 8000e84:	48000400 	.word	0x48000400

08000e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b096      	sub	sp, #88	@ 0x58
 8000e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	2244      	movs	r2, #68	@ 0x44
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f003 f874 	bl	8003f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000eaa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000eae:	f000 fd5d 	bl	800196c <HAL_PWREx_ControlVoltageScaling>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000eb8:	f000 f88c 	bl	8000fd4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ec8:	2360      	movs	r3, #96	@ 0x60
 8000eca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 fd9f 	bl	8001a18 <HAL_RCC_OscConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000ee0:	f000 f878 	bl	8000fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ef8:	463b      	mov	r3, r7
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f001 f99f 	bl	8002240 <HAL_RCC_ClockConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000f08:	f000 f864 	bl	8000fd4 <Error_Handler>
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3758      	adds	r7, #88	@ 0x58
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f18:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <MX_LPUART1_UART_Init+0x50>)
 8000f1a:	4a13      	ldr	r2, [pc, #76]	@ (8000f68 <MX_LPUART1_UART_Init+0x54>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <MX_LPUART1_UART_Init+0x50>)
 8000f20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f24:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <MX_LPUART1_UART_Init+0x50>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <MX_LPUART1_UART_Init+0x50>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <MX_LPUART1_UART_Init+0x50>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <MX_LPUART1_UART_Init+0x50>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <MX_LPUART1_UART_Init+0x50>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f44:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <MX_LPUART1_UART_Init+0x50>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <MX_LPUART1_UART_Init+0x50>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	@ (8000f64 <MX_LPUART1_UART_Init+0x50>)
 8000f52:	f001 fed5 	bl	8002d00 <HAL_UART_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000f5c:	f000 f83a 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200000f8 	.word	0x200000f8
 8000f68:	40008000 	.word	0x40008000

08000f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f80:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <MX_GPIO_Init+0x4c>)
 8000f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f84:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb8 <MX_GPIO_Init+0x4c>)
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <MX_GPIO_Init+0x4c>)
 8000f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4804      	ldr	r0, [pc, #16]	@ (8000fbc <MX_GPIO_Init+0x50>)
 8000faa:	f000 fb3f 	bl	800162c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fae:	bf00      	nop
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	48000400 	.word	0x48000400

08000fc0 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == LPUART1) {

    }
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <Error_Handler+0x8>

08000fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <HAL_MspInit+0x44>)
 8000fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fea:	4a0e      	ldr	r2, [pc, #56]	@ (8001024 <HAL_MspInit+0x44>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <HAL_MspInit+0x44>)
 8000ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <HAL_MspInit+0x44>)
 8001000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001002:	4a08      	ldr	r2, [pc, #32]	@ (8001024 <HAL_MspInit+0x44>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001008:	6593      	str	r3, [r2, #88]	@ 0x58
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_MspInit+0x44>)
 800100c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800100e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0a2      	sub	sp, #136	@ 0x88
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2260      	movs	r2, #96	@ 0x60
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f002 ff9b 	bl	8003f84 <memset>
  if(huart->Instance==LPUART1)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a24      	ldr	r2, [pc, #144]	@ (80010e4 <HAL_UART_MspInit+0xbc>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d140      	bne.n	80010da <HAL_UART_MspInit+0xb2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001058:	2320      	movs	r3, #32
 800105a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800105c:	2300      	movs	r3, #0
 800105e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4618      	mov	r0, r3
 8001066:	f001 fb0f 	bl	8002688 <HAL_RCCEx_PeriphCLKConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001070:	f7ff ffb0 	bl	8000fd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001074:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <HAL_UART_MspInit+0xc0>)
 8001076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001078:	4a1b      	ldr	r2, [pc, #108]	@ (80010e8 <HAL_UART_MspInit+0xc0>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001080:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <HAL_UART_MspInit+0xc0>)
 8001082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108c:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <HAL_UART_MspInit+0xc0>)
 800108e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001090:	4a15      	ldr	r2, [pc, #84]	@ (80010e8 <HAL_UART_MspInit+0xc0>)
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001098:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <HAL_UART_MspInit+0xc0>)
 800109a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010a4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010a8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b2:	2303      	movs	r3, #3
 80010b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80010b8:	2308      	movs	r3, #8
 80010ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010be:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80010c2:	4619      	mov	r1, r3
 80010c4:	4809      	ldr	r0, [pc, #36]	@ (80010ec <HAL_UART_MspInit+0xc4>)
 80010c6:	f000 fab1 	bl	800162c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	2046      	movs	r0, #70	@ 0x46
 80010d0:	f000 f9f7 	bl	80014c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80010d4:	2046      	movs	r0, #70	@ 0x46
 80010d6:	f000 fa10 	bl	80014fa <HAL_NVIC_EnableIRQ>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80010da:	bf00      	nop
 80010dc:	3788      	adds	r7, #136	@ 0x88
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40008000 	.word	0x40008000
 80010e8:	40021000 	.word	0x40021000
 80010ec:	48000400 	.word	0x48000400

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <NMI_Handler+0x4>

080010f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <MemManage_Handler+0x4>

08001108 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <UsageFault_Handler+0x4>

08001118 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001146:	f000 f89d 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001154:	4802      	ldr	r0, [pc, #8]	@ (8001160 <LPUART1_IRQHandler+0x10>)
 8001156:	f001 fe7f 	bl	8002e58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200000f8 	.word	0x200000f8

08001164 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <SystemInit+0x20>)
 800116a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800116e:	4a05      	ldr	r2, [pc, #20]	@ (8001184 <SystemInit+0x20>)
 8001170:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001174:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
     ldr   sp, =_estack    /* Set stack pointer */
 8001188:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800118c:	f7ff ffea 	bl	8001164 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001190:	480c      	ldr	r0, [pc, #48]	@ (80011c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001192:	490d      	ldr	r1, [pc, #52]	@ (80011c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001194:	4a0d      	ldr	r2, [pc, #52]	@ (80011cc <LoopForever+0xe>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800119c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a6:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a8:	4c0a      	ldr	r4, [pc, #40]	@ (80011d4 <LoopForever+0x16>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b6:	f002 feed 	bl	8003f94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ba:	f7ff fe4b 	bl	8000e54 <main>

080011be <LoopForever>:

LoopForever:
    b LoopForever
 80011be:	e7fe      	b.n	80011be <LoopForever>
     ldr   sp, =_estack    /* Set stack pointer */
 80011c0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80011cc:	0800404c 	.word	0x0800404c
  ldr r2, =_sbss
 80011d0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80011d4:	20000184 	.word	0x20000184

080011d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC1_IRQHandler>

080011da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f000 f961 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ea:	200f      	movs	r0, #15
 80011ec:	f000 f80e 	bl	800120c <HAL_InitTick>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d002      	beq.n	80011fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	e001      	b.n	8001200 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011fc:	f7ff fef0 	bl	8000fe0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001200:	79fb      	ldrb	r3, [r7, #7]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001218:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <HAL_InitTick+0x6c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d023      	beq.n	8001268 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001220:	4b16      	ldr	r3, [pc, #88]	@ (800127c <HAL_InitTick+0x70>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <HAL_InitTick+0x6c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f96d 	bl	8001516 <HAL_SYSTICK_Config>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10f      	bne.n	8001262 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d809      	bhi.n	800125c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f000 f937 	bl	80014c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001254:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <HAL_InitTick+0x74>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e007      	b.n	800126c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	e004      	b.n	800126c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	73fb      	strb	r3, [r7, #15]
 8001266:	e001      	b.n	800126c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000000c 	.word	0x2000000c
 800127c:	20000004 	.word	0x20000004
 8001280:	20000008 	.word	0x20000008

08001284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_IncTick+0x20>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_IncTick+0x24>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a04      	ldr	r2, [pc, #16]	@ (80012a8 <HAL_IncTick+0x24>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	2000000c 	.word	0x2000000c
 80012a8:	20000180 	.word	0x20000180

080012ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b03      	ldr	r3, [pc, #12]	@ (80012c0 <HAL_GetTick+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000180 	.word	0x20000180

080012c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff ffee 	bl	80012ac <HAL_GetTick>
 80012d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012dc:	d005      	beq.n	80012ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012de:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <HAL_Delay+0x44>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ea:	bf00      	nop
 80012ec:	f7ff ffde 	bl	80012ac <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d8f7      	bhi.n	80012ec <HAL_Delay+0x28>
  {
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000000c 	.word	0x2000000c

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	@ (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	@ (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db0b      	blt.n	800139a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	4907      	ldr	r1, [pc, #28]	@ (80013a8 <__NVIC_EnableIRQ+0x38>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100

080013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db0a      	blt.n	80013d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	@ (80013f8 <__NVIC_SetPriority+0x4c>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d4:	e00a      	b.n	80013ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4908      	ldr	r1, [pc, #32]	@ (80013fc <__NVIC_SetPriority+0x50>)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	3b04      	subs	r3, #4
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	761a      	strb	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	@ 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
         );
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	@ 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001478:	d301      	bcc.n	800147e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147a:	2301      	movs	r3, #1
 800147c:	e00f      	b.n	800149e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147e:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <SysTick_Config+0x40>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001486:	210f      	movs	r1, #15
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f7ff ff8e 	bl	80013ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001490:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <SysTick_Config+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001496:	4b04      	ldr	r3, [pc, #16]	@ (80014a8 <SysTick_Config+0x40>)
 8001498:	2207      	movs	r2, #7
 800149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff29 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014d4:	f7ff ff3e 	bl	8001354 <__NVIC_GetPriorityGrouping>
 80014d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f7ff ff8e 	bl	8001400 <NVIC_EncodePriority>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff5d 	bl	80013ac <__NVIC_SetPriority>
}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff31 	bl	8001370 <__NVIC_EnableIRQ>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ffa2 	bl	8001468 <SysTick_Config>
 8001524:	4603      	mov	r3, r0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800152e:	b480      	push	{r7}
 8001530:	b085      	sub	sp, #20
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d008      	beq.n	8001558 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2204      	movs	r2, #4
 800154a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e022      	b.n	800159e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 020e 	bic.w	r2, r2, #14
 8001566:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0201 	bic.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157c:	f003 021c 	and.w	r2, r3, #28
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001584:	2101      	movs	r1, #1
 8001586:	fa01 f202 	lsl.w	r2, r1, r2
 800158a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800159c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d005      	beq.n	80015ce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2204      	movs	r2, #4
 80015c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e029      	b.n	8001622 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 020e 	bic.w	r2, r2, #14
 80015dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0201 	bic.w	r2, r2, #1
 80015ec:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f2:	f003 021c 	and.w	r2, r3, #28
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	2101      	movs	r1, #1
 80015fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001600:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	4798      	blx	r3
    }
  }
  return status;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163a:	e154      	b.n	80018e6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2101      	movs	r1, #1
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	4013      	ands	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8146 	beq.w	80018e0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d005      	beq.n	800166c <HAL_GPIO_Init+0x40>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d130      	bne.n	80016ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016a2:	2201      	movs	r2, #1
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	091b      	lsrs	r3, r3, #4
 80016b8:	f003 0201 	and.w	r2, r3, #1
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d017      	beq.n	800170a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	2203      	movs	r2, #3
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d123      	bne.n	800175e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	08da      	lsrs	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3208      	adds	r2, #8
 800171e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	220f      	movs	r2, #15
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	691a      	ldr	r2, [r3, #16]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	6939      	ldr	r1, [r7, #16]
 800175a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	2203      	movs	r2, #3
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0203 	and.w	r2, r3, #3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 80a0 	beq.w	80018e0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a0:	4b58      	ldr	r3, [pc, #352]	@ (8001904 <HAL_GPIO_Init+0x2d8>)
 80017a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a4:	4a57      	ldr	r2, [pc, #348]	@ (8001904 <HAL_GPIO_Init+0x2d8>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80017ac:	4b55      	ldr	r3, [pc, #340]	@ (8001904 <HAL_GPIO_Init+0x2d8>)
 80017ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017b8:	4a53      	ldr	r2, [pc, #332]	@ (8001908 <HAL_GPIO_Init+0x2dc>)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	3302      	adds	r3, #2
 80017c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	220f      	movs	r2, #15
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017e2:	d019      	beq.n	8001818 <HAL_GPIO_Init+0x1ec>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a49      	ldr	r2, [pc, #292]	@ (800190c <HAL_GPIO_Init+0x2e0>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d013      	beq.n	8001814 <HAL_GPIO_Init+0x1e8>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a48      	ldr	r2, [pc, #288]	@ (8001910 <HAL_GPIO_Init+0x2e4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d00d      	beq.n	8001810 <HAL_GPIO_Init+0x1e4>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a47      	ldr	r2, [pc, #284]	@ (8001914 <HAL_GPIO_Init+0x2e8>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d007      	beq.n	800180c <HAL_GPIO_Init+0x1e0>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a46      	ldr	r2, [pc, #280]	@ (8001918 <HAL_GPIO_Init+0x2ec>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d101      	bne.n	8001808 <HAL_GPIO_Init+0x1dc>
 8001804:	2304      	movs	r3, #4
 8001806:	e008      	b.n	800181a <HAL_GPIO_Init+0x1ee>
 8001808:	2307      	movs	r3, #7
 800180a:	e006      	b.n	800181a <HAL_GPIO_Init+0x1ee>
 800180c:	2303      	movs	r3, #3
 800180e:	e004      	b.n	800181a <HAL_GPIO_Init+0x1ee>
 8001810:	2302      	movs	r3, #2
 8001812:	e002      	b.n	800181a <HAL_GPIO_Init+0x1ee>
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <HAL_GPIO_Init+0x1ee>
 8001818:	2300      	movs	r3, #0
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	f002 0203 	and.w	r2, r2, #3
 8001820:	0092      	lsls	r2, r2, #2
 8001822:	4093      	lsls	r3, r2
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800182a:	4937      	ldr	r1, [pc, #220]	@ (8001908 <HAL_GPIO_Init+0x2dc>)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	3302      	adds	r3, #2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001838:	4b38      	ldr	r3, [pc, #224]	@ (800191c <HAL_GPIO_Init+0x2f0>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800185c:	4a2f      	ldr	r2, [pc, #188]	@ (800191c <HAL_GPIO_Init+0x2f0>)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001862:	4b2e      	ldr	r3, [pc, #184]	@ (800191c <HAL_GPIO_Init+0x2f0>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	43db      	mvns	r3, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001886:	4a25      	ldr	r2, [pc, #148]	@ (800191c <HAL_GPIO_Init+0x2f0>)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800188c:	4b23      	ldr	r3, [pc, #140]	@ (800191c <HAL_GPIO_Init+0x2f0>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	43db      	mvns	r3, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018b0:	4a1a      	ldr	r2, [pc, #104]	@ (800191c <HAL_GPIO_Init+0x2f0>)
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018b6:	4b19      	ldr	r3, [pc, #100]	@ (800191c <HAL_GPIO_Init+0x2f0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018da:	4a10      	ldr	r2, [pc, #64]	@ (800191c <HAL_GPIO_Init+0x2f0>)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	3301      	adds	r3, #1
 80018e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	fa22 f303 	lsr.w	r3, r2, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f47f aea3 	bne.w	800163c <HAL_GPIO_Init+0x10>
  }
}
 80018f6:	bf00      	nop
 80018f8:	bf00      	nop
 80018fa:	371c      	adds	r7, #28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	40021000 	.word	0x40021000
 8001908:	40010000 	.word	0x40010000
 800190c:	48000400 	.word	0x48000400
 8001910:	48000800 	.word	0x48000800
 8001914:	48000c00 	.word	0x48000c00
 8001918:	48001000 	.word	0x48001000
 800191c:	40010400 	.word	0x40010400

08001920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	807b      	strh	r3, [r7, #2]
 800192c:	4613      	mov	r3, r2
 800192e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001930:	787b      	ldrb	r3, [r7, #1]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001936:	887a      	ldrh	r2, [r7, #2]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800193c:	e002      	b.n	8001944 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800193e:	887a      	ldrh	r2, [r7, #2]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001954:	4b04      	ldr	r3, [pc, #16]	@ (8001968 <HAL_PWREx_GetVoltageRange+0x18>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40007000 	.word	0x40007000

0800196c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800197a:	d130      	bne.n	80019de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800197c:	4b23      	ldr	r3, [pc, #140]	@ (8001a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001984:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001988:	d038      	beq.n	80019fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800198a:	4b20      	ldr	r3, [pc, #128]	@ (8001a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001992:	4a1e      	ldr	r2, [pc, #120]	@ (8001a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001994:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001998:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800199a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2232      	movs	r2, #50	@ 0x32
 80019a0:	fb02 f303 	mul.w	r3, r2, r3
 80019a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019a6:	fba2 2303 	umull	r2, r3, r2, r3
 80019aa:	0c9b      	lsrs	r3, r3, #18
 80019ac:	3301      	adds	r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019b0:	e002      	b.n	80019b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019b8:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019c4:	d102      	bne.n	80019cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1f2      	bne.n	80019b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019cc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019d8:	d110      	bne.n	80019fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e00f      	b.n	80019fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019de:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019ea:	d007      	beq.n	80019fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019ec:	4b07      	ldr	r3, [pc, #28]	@ (8001a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019f4:	4a05      	ldr	r2, [pc, #20]	@ (8001a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40007000 	.word	0x40007000
 8001a10:	20000004 	.word	0x20000004
 8001a14:	431bde83 	.word	0x431bde83

08001a18 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d102      	bne.n	8001a2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	f000 bc02 	b.w	8002230 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a2c:	4b96      	ldr	r3, [pc, #600]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a36:	4b94      	ldr	r3, [pc, #592]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0310 	and.w	r3, r3, #16
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80e4 	beq.w	8001c16 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d007      	beq.n	8001a64 <HAL_RCC_OscConfig+0x4c>
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	2b0c      	cmp	r3, #12
 8001a58:	f040 808b 	bne.w	8001b72 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	f040 8087 	bne.w	8001b72 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a64:	4b88      	ldr	r3, [pc, #544]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_RCC_OscConfig+0x64>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e3d9      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a1a      	ldr	r2, [r3, #32]
 8001a80:	4b81      	ldr	r3, [pc, #516]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <HAL_RCC_OscConfig+0x7e>
 8001a8c:	4b7e      	ldr	r3, [pc, #504]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a94:	e005      	b.n	8001aa2 <HAL_RCC_OscConfig+0x8a>
 8001a96:	4b7c      	ldr	r3, [pc, #496]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d223      	bcs.n	8001aee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 fd8c 	bl	80025c8 <RCC_SetFlashLatencyFromMSIRange>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e3ba      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aba:	4b73      	ldr	r3, [pc, #460]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a72      	ldr	r2, [pc, #456]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001ac0:	f043 0308 	orr.w	r3, r3, #8
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b70      	ldr	r3, [pc, #448]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	496d      	ldr	r1, [pc, #436]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ad8:	4b6b      	ldr	r3, [pc, #428]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	4968      	ldr	r1, [pc, #416]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
 8001aec:	e025      	b.n	8001b3a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aee:	4b66      	ldr	r3, [pc, #408]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a65      	ldr	r2, [pc, #404]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001af4:	f043 0308 	orr.w	r3, r3, #8
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b63      	ldr	r3, [pc, #396]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	4960      	ldr	r1, [pc, #384]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b0c:	4b5e      	ldr	r3, [pc, #376]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	495b      	ldr	r1, [pc, #364]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d109      	bne.n	8001b3a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 fd4c 	bl	80025c8 <RCC_SetFlashLatencyFromMSIRange>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e37a      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b3a:	f000 fc81 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	4b51      	ldr	r3, [pc, #324]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	4950      	ldr	r1, [pc, #320]	@ (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001b4c:	5ccb      	ldrb	r3, [r1, r3]
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	fa22 f303 	lsr.w	r3, r2, r3
 8001b56:	4a4e      	ldr	r2, [pc, #312]	@ (8001c90 <HAL_RCC_OscConfig+0x278>)
 8001b58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b5a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fb54 	bl	800120c <HAL_InitTick>
 8001b64:	4603      	mov	r3, r0
 8001b66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d052      	beq.n	8001c14 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	e35e      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d032      	beq.n	8001be0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b7a:	4b43      	ldr	r3, [pc, #268]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a42      	ldr	r2, [pc, #264]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b86:	f7ff fb91 	bl	80012ac <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b8e:	f7ff fb8d 	bl	80012ac <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e347      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ba0:	4b39      	ldr	r3, [pc, #228]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bac:	4b36      	ldr	r3, [pc, #216]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a35      	ldr	r2, [pc, #212]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	f043 0308 	orr.w	r3, r3, #8
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b33      	ldr	r3, [pc, #204]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4930      	ldr	r1, [pc, #192]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bca:	4b2f      	ldr	r3, [pc, #188]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	492b      	ldr	r1, [pc, #172]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	604b      	str	r3, [r1, #4]
 8001bde:	e01a      	b.n	8001c16 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001be0:	4b29      	ldr	r3, [pc, #164]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a28      	ldr	r2, [pc, #160]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001be6:	f023 0301 	bic.w	r3, r3, #1
 8001bea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bec:	f7ff fb5e 	bl	80012ac <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bf4:	f7ff fb5a 	bl	80012ac <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e314      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c06:	4b20      	ldr	r3, [pc, #128]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x1dc>
 8001c12:	e000      	b.n	8001c16 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d073      	beq.n	8001d0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_OscConfig+0x21c>
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2b0c      	cmp	r3, #12
 8001c2c:	d10e      	bne.n	8001c4c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d10b      	bne.n	8001c4c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	4b14      	ldr	r3, [pc, #80]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d063      	beq.n	8001d08 <HAL_RCC_OscConfig+0x2f0>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d15f      	bne.n	8001d08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e2f1      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c54:	d106      	bne.n	8001c64 <HAL_RCC_OscConfig+0x24c>
 8001c56:	4b0c      	ldr	r3, [pc, #48]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e025      	b.n	8001cb0 <HAL_RCC_OscConfig+0x298>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c6c:	d114      	bne.n	8001c98 <HAL_RCC_OscConfig+0x280>
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a05      	ldr	r2, [pc, #20]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b03      	ldr	r3, [pc, #12]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a02      	ldr	r2, [pc, #8]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e013      	b.n	8001cb0 <HAL_RCC_OscConfig+0x298>
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	08003ff4 	.word	0x08003ff4
 8001c90:	20000004 	.word	0x20000004
 8001c94:	20000008 	.word	0x20000008
 8001c98:	4ba0      	ldr	r3, [pc, #640]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a9f      	ldr	r2, [pc, #636]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	4b9d      	ldr	r3, [pc, #628]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a9c      	ldr	r2, [pc, #624]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001caa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d013      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff faf8 	bl	80012ac <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff faf4 	bl	80012ac <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	@ 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e2ae      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cd2:	4b92      	ldr	r3, [pc, #584]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x2a8>
 8001cde:	e014      	b.n	8001d0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fae4 	bl	80012ac <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fae0 	bl	80012ac <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	@ 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e29a      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cfa:	4b88      	ldr	r3, [pc, #544]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x2d0>
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d060      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_OscConfig+0x310>
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2b0c      	cmp	r3, #12
 8001d20:	d119      	bne.n	8001d56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d116      	bne.n	8001d56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d28:	4b7c      	ldr	r3, [pc, #496]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_OscConfig+0x328>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e277      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d40:	4b76      	ldr	r3, [pc, #472]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	061b      	lsls	r3, r3, #24
 8001d4e:	4973      	ldr	r1, [pc, #460]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d54:	e040      	b.n	8001dd8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d023      	beq.n	8001da6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d5e:	4b6f      	ldr	r3, [pc, #444]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a6e      	ldr	r2, [pc, #440]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fa9f 	bl	80012ac <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d72:	f7ff fa9b 	bl	80012ac <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e255      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d84:	4b65      	ldr	r3, [pc, #404]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d90:	4b62      	ldr	r3, [pc, #392]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	061b      	lsls	r3, r3, #24
 8001d9e:	495f      	ldr	r1, [pc, #380]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	604b      	str	r3, [r1, #4]
 8001da4:	e018      	b.n	8001dd8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da6:	4b5d      	ldr	r3, [pc, #372]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a5c      	ldr	r2, [pc, #368]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001dac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db2:	f7ff fa7b 	bl	80012ac <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dba:	f7ff fa77 	bl	80012ac <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e231      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dcc:	4b53      	ldr	r3, [pc, #332]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1f0      	bne.n	8001dba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d03c      	beq.n	8001e5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d01c      	beq.n	8001e26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dec:	4b4b      	ldr	r3, [pc, #300]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001df2:	4a4a      	ldr	r2, [pc, #296]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfc:	f7ff fa56 	bl	80012ac <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e04:	f7ff fa52 	bl	80012ac <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e20c      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e16:	4b41      	ldr	r3, [pc, #260]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0ef      	beq.n	8001e04 <HAL_RCC_OscConfig+0x3ec>
 8001e24:	e01b      	b.n	8001e5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e26:	4b3d      	ldr	r3, [pc, #244]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e2c:	4a3b      	ldr	r2, [pc, #236]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001e2e:	f023 0301 	bic.w	r3, r3, #1
 8001e32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e36:	f7ff fa39 	bl	80012ac <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e3e:	f7ff fa35 	bl	80012ac <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e1ef      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e50:	4b32      	ldr	r3, [pc, #200]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1ef      	bne.n	8001e3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 80a6 	beq.w	8001fb8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e70:	4b2a      	ldr	r3, [pc, #168]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10d      	bne.n	8001e98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7c:	4b27      	ldr	r3, [pc, #156]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e80:	4a26      	ldr	r2, [pc, #152]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e86:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e88:	4b24      	ldr	r3, [pc, #144]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e94:	2301      	movs	r3, #1
 8001e96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e98:	4b21      	ldr	r3, [pc, #132]	@ (8001f20 <HAL_RCC_OscConfig+0x508>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d118      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f20 <HAL_RCC_OscConfig+0x508>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8001f20 <HAL_RCC_OscConfig+0x508>)
 8001eaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb0:	f7ff f9fc 	bl	80012ac <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb8:	f7ff f9f8 	bl	80012ac <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e1b2      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_RCC_OscConfig+0x508>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d108      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x4d8>
 8001ede:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eee:	e029      	b.n	8001f44 <HAL_RCC_OscConfig+0x52c>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	d115      	bne.n	8001f24 <HAL_RCC_OscConfig+0x50c>
 8001ef8:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efe:	4a07      	ldr	r2, [pc, #28]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001f00:	f043 0304 	orr.w	r3, r3, #4
 8001f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f08:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0e:	4a03      	ldr	r2, [pc, #12]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f18:	e014      	b.n	8001f44 <HAL_RCC_OscConfig+0x52c>
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40007000 	.word	0x40007000
 8001f24:	4b9a      	ldr	r3, [pc, #616]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f2a:	4a99      	ldr	r2, [pc, #612]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001f2c:	f023 0301 	bic.w	r3, r3, #1
 8001f30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f34:	4b96      	ldr	r3, [pc, #600]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f3a:	4a95      	ldr	r2, [pc, #596]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001f3c:	f023 0304 	bic.w	r3, r3, #4
 8001f40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d016      	beq.n	8001f7a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4c:	f7ff f9ae 	bl	80012ac <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f54:	f7ff f9aa 	bl	80012ac <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e162      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f6a:	4b89      	ldr	r3, [pc, #548]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0ed      	beq.n	8001f54 <HAL_RCC_OscConfig+0x53c>
 8001f78:	e015      	b.n	8001fa6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7a:	f7ff f997 	bl	80012ac <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7ff f993 	bl	80012ac <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e14b      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f98:	4b7d      	ldr	r3, [pc, #500]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1ed      	bne.n	8001f82 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fa6:	7ffb      	ldrb	r3, [r7, #31]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d105      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fac:	4b78      	ldr	r3, [pc, #480]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb0:	4a77      	ldr	r2, [pc, #476]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001fb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fb6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0320 	and.w	r3, r3, #32
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d03c      	beq.n	800203e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d01c      	beq.n	8002006 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fcc:	4b70      	ldr	r3, [pc, #448]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001fce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fd2:	4a6f      	ldr	r2, [pc, #444]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fdc:	f7ff f966 	bl	80012ac <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fe4:	f7ff f962 	bl	80012ac <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e11c      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ff6:	4b66      	ldr	r3, [pc, #408]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001ff8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0ef      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x5cc>
 8002004:	e01b      	b.n	800203e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002006:	4b62      	ldr	r3, [pc, #392]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8002008:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800200c:	4a60      	ldr	r2, [pc, #384]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 800200e:	f023 0301 	bic.w	r3, r3, #1
 8002012:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002016:	f7ff f949 	bl	80012ac <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800201e:	f7ff f945 	bl	80012ac <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e0ff      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002030:	4b57      	ldr	r3, [pc, #348]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8002032:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1ef      	bne.n	800201e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 80f3 	beq.w	800222e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204c:	2b02      	cmp	r3, #2
 800204e:	f040 80c9 	bne.w	80021e4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002052:	4b4f      	ldr	r3, [pc, #316]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 0203 	and.w	r2, r3, #3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002062:	429a      	cmp	r2, r3
 8002064:	d12c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002070:	3b01      	subs	r3, #1
 8002072:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002074:	429a      	cmp	r2, r3
 8002076:	d123      	bne.n	80020c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002082:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002084:	429a      	cmp	r2, r3
 8002086:	d11b      	bne.n	80020c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002092:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002094:	429a      	cmp	r2, r3
 8002096:	d113      	bne.n	80020c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	3b01      	subs	r3, #1
 80020a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d109      	bne.n	80020c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	085b      	lsrs	r3, r3, #1
 80020b8:	3b01      	subs	r3, #1
 80020ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020bc:	429a      	cmp	r2, r3
 80020be:	d06b      	beq.n	8002198 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	2b0c      	cmp	r3, #12
 80020c4:	d062      	beq.n	800218c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020c6:	4b32      	ldr	r3, [pc, #200]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0ac      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a2d      	ldr	r2, [pc, #180]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 80020dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020e2:	f7ff f8e3 	bl	80012ac <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ea:	f7ff f8df 	bl	80012ac <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e099      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020fc:	4b24      	ldr	r3, [pc, #144]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f0      	bne.n	80020ea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002108:	4b21      	ldr	r3, [pc, #132]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	4b21      	ldr	r3, [pc, #132]	@ (8002194 <HAL_RCC_OscConfig+0x77c>)
 800210e:	4013      	ands	r3, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002118:	3a01      	subs	r2, #1
 800211a:	0112      	lsls	r2, r2, #4
 800211c:	4311      	orrs	r1, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002122:	0212      	lsls	r2, r2, #8
 8002124:	4311      	orrs	r1, r2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800212a:	0852      	lsrs	r2, r2, #1
 800212c:	3a01      	subs	r2, #1
 800212e:	0552      	lsls	r2, r2, #21
 8002130:	4311      	orrs	r1, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002136:	0852      	lsrs	r2, r2, #1
 8002138:	3a01      	subs	r2, #1
 800213a:	0652      	lsls	r2, r2, #25
 800213c:	4311      	orrs	r1, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002142:	06d2      	lsls	r2, r2, #27
 8002144:	430a      	orrs	r2, r1
 8002146:	4912      	ldr	r1, [pc, #72]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8002148:	4313      	orrs	r3, r2
 800214a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800214c:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0f      	ldr	r2, [pc, #60]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8002152:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002156:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002158:	4b0d      	ldr	r3, [pc, #52]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4a0c      	ldr	r2, [pc, #48]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 800215e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002162:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002164:	f7ff f8a2 	bl	80012ac <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216c:	f7ff f89e 	bl	80012ac <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e058      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217e:	4b04      	ldr	r3, [pc, #16]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800218a:	e050      	b.n	800222e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e04f      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
 8002190:	40021000 	.word	0x40021000
 8002194:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002198:	4b27      	ldr	r3, [pc, #156]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d144      	bne.n	800222e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021a4:	4b24      	ldr	r3, [pc, #144]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a23      	ldr	r2, [pc, #140]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 80021aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021b0:	4b21      	ldr	r3, [pc, #132]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4a20      	ldr	r2, [pc, #128]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 80021b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021bc:	f7ff f876 	bl	80012ac <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c4:	f7ff f872 	bl	80012ac <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e02c      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d6:	4b18      	ldr	r3, [pc, #96]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x7ac>
 80021e2:	e024      	b.n	800222e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2b0c      	cmp	r3, #12
 80021e8:	d01f      	beq.n	800222a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ea:	4b13      	ldr	r3, [pc, #76]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a12      	ldr	r2, [pc, #72]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 80021f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f6:	f7ff f859 	bl	80012ac <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fe:	f7ff f855 	bl	80012ac <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e00f      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002210:	4b09      	ldr	r3, [pc, #36]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f0      	bne.n	80021fe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800221c:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	4905      	ldr	r1, [pc, #20]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_RCC_OscConfig+0x824>)
 8002224:	4013      	ands	r3, r2
 8002226:	60cb      	str	r3, [r1, #12]
 8002228:	e001      	b.n	800222e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3720      	adds	r7, #32
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	feeefffc 	.word	0xfeeefffc

08002240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0e7      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002254:	4b75      	ldr	r3, [pc, #468]	@ (800242c <HAL_RCC_ClockConfig+0x1ec>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d910      	bls.n	8002284 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002262:	4b72      	ldr	r3, [pc, #456]	@ (800242c <HAL_RCC_ClockConfig+0x1ec>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 0207 	bic.w	r2, r3, #7
 800226a:	4970      	ldr	r1, [pc, #448]	@ (800242c <HAL_RCC_ClockConfig+0x1ec>)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b6e      	ldr	r3, [pc, #440]	@ (800242c <HAL_RCC_ClockConfig+0x1ec>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0cf      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d010      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	4b66      	ldr	r3, [pc, #408]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800229c:	429a      	cmp	r2, r3
 800229e:	d908      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a0:	4b63      	ldr	r3, [pc, #396]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4960      	ldr	r1, [pc, #384]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d04c      	beq.n	8002358 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d107      	bne.n	80022d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c6:	4b5a      	ldr	r3, [pc, #360]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d121      	bne.n	8002316 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0a6      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d107      	bne.n	80022ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022de:	4b54      	ldr	r3, [pc, #336]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d115      	bne.n	8002316 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e09a      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d109      	bne.n	8002316 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e08e      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002306:	4b4a      	ldr	r3, [pc, #296]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e086      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002316:	4b46      	ldr	r3, [pc, #280]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f023 0203 	bic.w	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4943      	ldr	r1, [pc, #268]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002324:	4313      	orrs	r3, r2
 8002326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002328:	f7fe ffc0 	bl	80012ac <HAL_GetTick>
 800232c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	e00a      	b.n	8002346 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002330:	f7fe ffbc 	bl	80012ac <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e06e      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	4b3a      	ldr	r3, [pc, #232]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 020c 	and.w	r2, r3, #12
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	429a      	cmp	r2, r3
 8002356:	d1eb      	bne.n	8002330 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d010      	beq.n	8002386 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	4b31      	ldr	r3, [pc, #196]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002370:	429a      	cmp	r2, r3
 8002372:	d208      	bcs.n	8002386 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002374:	4b2e      	ldr	r3, [pc, #184]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	492b      	ldr	r1, [pc, #172]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002382:	4313      	orrs	r3, r2
 8002384:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002386:	4b29      	ldr	r3, [pc, #164]	@ (800242c <HAL_RCC_ClockConfig+0x1ec>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d210      	bcs.n	80023b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002394:	4b25      	ldr	r3, [pc, #148]	@ (800242c <HAL_RCC_ClockConfig+0x1ec>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f023 0207 	bic.w	r2, r3, #7
 800239c:	4923      	ldr	r1, [pc, #140]	@ (800242c <HAL_RCC_ClockConfig+0x1ec>)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a4:	4b21      	ldr	r3, [pc, #132]	@ (800242c <HAL_RCC_ClockConfig+0x1ec>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d001      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e036      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d008      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	4918      	ldr	r1, [pc, #96]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d009      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e0:	4b13      	ldr	r3, [pc, #76]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4910      	ldr	r1, [pc, #64]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023f4:	f000 f824 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80023f8:	4602      	mov	r2, r0
 80023fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	490b      	ldr	r1, [pc, #44]	@ (8002434 <HAL_RCC_ClockConfig+0x1f4>)
 8002406:	5ccb      	ldrb	r3, [r1, r3]
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
 8002410:	4a09      	ldr	r2, [pc, #36]	@ (8002438 <HAL_RCC_ClockConfig+0x1f8>)
 8002412:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002414:	4b09      	ldr	r3, [pc, #36]	@ (800243c <HAL_RCC_ClockConfig+0x1fc>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fef7 	bl	800120c <HAL_InitTick>
 800241e:	4603      	mov	r3, r0
 8002420:	72fb      	strb	r3, [r7, #11]

  return status;
 8002422:	7afb      	ldrb	r3, [r7, #11]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40022000 	.word	0x40022000
 8002430:	40021000 	.word	0x40021000
 8002434:	08003ff4 	.word	0x08003ff4
 8002438:	20000004 	.word	0x20000004
 800243c:	20000008 	.word	0x20000008

08002440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	@ 0x24
 8002444:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800244e:	4b3e      	ldr	r3, [pc, #248]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002458:	4b3b      	ldr	r3, [pc, #236]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0x34>
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	2b0c      	cmp	r3, #12
 800246c:	d121      	bne.n	80024b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d11e      	bne.n	80024b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002474:	4b34      	ldr	r3, [pc, #208]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d107      	bne.n	8002490 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002480:	4b31      	ldr	r3, [pc, #196]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	61fb      	str	r3, [r7, #28]
 800248e:	e005      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002490:	4b2d      	ldr	r3, [pc, #180]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800249c:	4a2b      	ldr	r2, [pc, #172]	@ (800254c <HAL_RCC_GetSysClockFreq+0x10c>)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10d      	bne.n	80024c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024b0:	e00a      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d102      	bne.n	80024be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024b8:	4b25      	ldr	r3, [pc, #148]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x110>)
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	e004      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024c4:	4b23      	ldr	r3, [pc, #140]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x114>)
 80024c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	2b0c      	cmp	r3, #12
 80024cc:	d134      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d003      	beq.n	80024e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d003      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0xac>
 80024e4:	e005      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x110>)
 80024e8:	617b      	str	r3, [r7, #20]
      break;
 80024ea:	e005      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024ec:	4b19      	ldr	r3, [pc, #100]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x114>)
 80024ee:	617b      	str	r3, [r7, #20]
      break;
 80024f0:	e002      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	617b      	str	r3, [r7, #20]
      break;
 80024f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024f8:	4b13      	ldr	r3, [pc, #76]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	3301      	adds	r3, #1
 8002504:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002506:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	fb03 f202 	mul.w	r2, r3, r2
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	fbb2 f3f3 	udiv	r3, r2, r3
 800251c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800251e:	4b0a      	ldr	r3, [pc, #40]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	0e5b      	lsrs	r3, r3, #25
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	3301      	adds	r3, #1
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	fbb2 f3f3 	udiv	r3, r2, r3
 8002536:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002538:	69bb      	ldr	r3, [r7, #24]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3724      	adds	r7, #36	@ 0x24
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	0800400c 	.word	0x0800400c
 8002550:	00f42400 	.word	0x00f42400
 8002554:	007a1200 	.word	0x007a1200

08002558 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800255c:	4b03      	ldr	r3, [pc, #12]	@ (800256c <HAL_RCC_GetHCLKFreq+0x14>)
 800255e:	681b      	ldr	r3, [r3, #0]
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000004 	.word	0x20000004

08002570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002574:	f7ff fff0 	bl	8002558 <HAL_RCC_GetHCLKFreq>
 8002578:	4602      	mov	r2, r0
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <HAL_RCC_GetPCLK1Freq+0x24>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	4904      	ldr	r1, [pc, #16]	@ (8002598 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002586:	5ccb      	ldrb	r3, [r1, r3]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002590:	4618      	mov	r0, r3
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000
 8002598:	08004004 	.word	0x08004004

0800259c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025a0:	f7ff ffda 	bl	8002558 <HAL_RCC_GetHCLKFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	0adb      	lsrs	r3, r3, #11
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	4904      	ldr	r1, [pc, #16]	@ (80025c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025bc:	4618      	mov	r0, r3
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000
 80025c4:	08004004 	.word	0x08004004

080025c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025e0:	f7ff f9b6 	bl	8001950 <HAL_PWREx_GetVoltageRange>
 80025e4:	6178      	str	r0, [r7, #20]
 80025e6:	e014      	b.n	8002612 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025e8:	4b25      	ldr	r3, [pc, #148]	@ (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ec:	4a24      	ldr	r2, [pc, #144]	@ (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80025f4:	4b22      	ldr	r3, [pc, #136]	@ (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002600:	f7ff f9a6 	bl	8001950 <HAL_PWREx_GetVoltageRange>
 8002604:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002606:	4b1e      	ldr	r3, [pc, #120]	@ (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260a:	4a1d      	ldr	r2, [pc, #116]	@ (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002610:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002618:	d10b      	bne.n	8002632 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b80      	cmp	r3, #128	@ 0x80
 800261e:	d919      	bls.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2ba0      	cmp	r3, #160	@ 0xa0
 8002624:	d902      	bls.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002626:	2302      	movs	r3, #2
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	e013      	b.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800262c:	2301      	movs	r3, #1
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	e010      	b.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b80      	cmp	r3, #128	@ 0x80
 8002636:	d902      	bls.n	800263e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002638:	2303      	movs	r3, #3
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	e00a      	b.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b80      	cmp	r3, #128	@ 0x80
 8002642:	d102      	bne.n	800264a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002644:	2302      	movs	r3, #2
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	e004      	b.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b70      	cmp	r3, #112	@ 0x70
 800264e:	d101      	bne.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002650:	2301      	movs	r3, #1
 8002652:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002654:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f023 0207 	bic.w	r2, r3, #7
 800265c:	4909      	ldr	r1, [pc, #36]	@ (8002684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002664:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	429a      	cmp	r2, r3
 8002670:	d001      	beq.n	8002676 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000
 8002684:	40022000 	.word	0x40022000

08002688 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002690:	2300      	movs	r3, #0
 8002692:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002694:	2300      	movs	r3, #0
 8002696:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d031      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80026ac:	d01a      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80026ae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80026b2:	d814      	bhi.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d009      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026bc:	d10f      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80026be:	4b5d      	ldr	r3, [pc, #372]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	4a5c      	ldr	r2, [pc, #368]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ca:	e00c      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3304      	adds	r3, #4
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fa22 	bl	8002b1c <RCCEx_PLLSAI1_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026dc:	e003      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	74fb      	strb	r3, [r7, #19]
      break;
 80026e2:	e000      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80026e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10b      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026ec:	4b51      	ldr	r3, [pc, #324]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fa:	494e      	ldr	r1, [pc, #312]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002702:	e001      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002704:	7cfb      	ldrb	r3, [r7, #19]
 8002706:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 809e 	beq.w	8002852 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800271a:	4b46      	ldr	r3, [pc, #280]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800271c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800272a:	2300      	movs	r3, #0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00d      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002730:	4b40      	ldr	r3, [pc, #256]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002734:	4a3f      	ldr	r2, [pc, #252]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800273a:	6593      	str	r3, [r2, #88]	@ 0x58
 800273c:	4b3d      	ldr	r3, [pc, #244]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800273e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002748:	2301      	movs	r3, #1
 800274a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800274c:	4b3a      	ldr	r3, [pc, #232]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a39      	ldr	r2, [pc, #228]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002752:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002756:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002758:	f7fe fda8 	bl	80012ac <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800275e:	e009      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002760:	f7fe fda4 	bl	80012ac <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d902      	bls.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	74fb      	strb	r3, [r7, #19]
        break;
 8002772:	e005      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002774:	4b30      	ldr	r3, [pc, #192]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0ef      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002780:	7cfb      	ldrb	r3, [r7, #19]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d15a      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002786:	4b2b      	ldr	r3, [pc, #172]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002790:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d01e      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d019      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027a2:	4b24      	ldr	r3, [pc, #144]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027ae:	4b21      	ldr	r3, [pc, #132]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027be:	4b1d      	ldr	r3, [pc, #116]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027ce:	4a19      	ldr	r2, [pc, #100]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d016      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe fd64 	bl	80012ac <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e6:	e00b      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e8:	f7fe fd60 	bl	80012ac <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d902      	bls.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	74fb      	strb	r3, [r7, #19]
            break;
 80027fe:	e006      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002800:	4b0c      	ldr	r3, [pc, #48]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0ec      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800280e:	7cfb      	ldrb	r3, [r7, #19]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10b      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002814:	4b07      	ldr	r3, [pc, #28]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002822:	4904      	ldr	r1, [pc, #16]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800282a:	e009      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	74bb      	strb	r3, [r7, #18]
 8002830:	e006      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
 8002838:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800283c:	7cfb      	ldrb	r3, [r7, #19]
 800283e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002840:	7c7b      	ldrb	r3, [r7, #17]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d105      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002846:	4b8d      	ldr	r3, [pc, #564]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284a:	4a8c      	ldr	r2, [pc, #560]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800284c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002850:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800285e:	4b87      	ldr	r3, [pc, #540]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002864:	f023 0203 	bic.w	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4983      	ldr	r1, [pc, #524]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002880:	4b7e      	ldr	r3, [pc, #504]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002886:	f023 020c 	bic.w	r2, r3, #12
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288e:	497b      	ldr	r1, [pc, #492]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028a2:	4b76      	ldr	r3, [pc, #472]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80028a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b0:	4972      	ldr	r1, [pc, #456]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028c4:	4b6d      	ldr	r3, [pc, #436]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d2:	496a      	ldr	r1, [pc, #424]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028e6:	4b65      	ldr	r3, [pc, #404]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f4:	4961      	ldr	r1, [pc, #388]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002908:	4b5c      	ldr	r3, [pc, #368]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800290e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	4959      	ldr	r1, [pc, #356]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800292a:	4b54      	ldr	r3, [pc, #336]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002930:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002938:	4950      	ldr	r1, [pc, #320]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800294c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002952:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800295a:	4948      	ldr	r1, [pc, #288]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800296e:	4b43      	ldr	r3, [pc, #268]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002974:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297c:	493f      	ldr	r1, [pc, #252]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d028      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002990:	4b3a      	ldr	r3, [pc, #232]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002996:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800299e:	4937      	ldr	r1, [pc, #220]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029ae:	d106      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029b0:	4b32      	ldr	r3, [pc, #200]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4a31      	ldr	r2, [pc, #196]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80029b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029ba:	60d3      	str	r3, [r2, #12]
 80029bc:	e011      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029c6:	d10c      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3304      	adds	r3, #4
 80029cc:	2101      	movs	r1, #1
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 f8a4 	bl	8002b1c <RCCEx_PLLSAI1_Config>
 80029d4:	4603      	mov	r3, r0
 80029d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029d8:	7cfb      	ldrb	r3, [r7, #19]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80029de:	7cfb      	ldrb	r3, [r7, #19]
 80029e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d028      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029ee:	4b23      	ldr	r3, [pc, #140]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80029f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fc:	491f      	ldr	r1, [pc, #124]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a0c:	d106      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	4a1a      	ldr	r2, [pc, #104]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a18:	60d3      	str	r3, [r2, #12]
 8002a1a:	e011      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 f875 	bl	8002b1c <RCCEx_PLLSAI1_Config>
 8002a32:	4603      	mov	r3, r0
 8002a34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a36:	7cfb      	ldrb	r3, [r7, #19]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002a3c:	7cfb      	ldrb	r3, [r7, #19]
 8002a3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d02b      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a5a:	4908      	ldr	r1, [pc, #32]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a6a:	d109      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a6c:	4b03      	ldr	r3, [pc, #12]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4a02      	ldr	r2, [pc, #8]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a76:	60d3      	str	r3, [r2, #12]
 8002a78:	e014      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	2101      	movs	r1, #1
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 f843 	bl	8002b1c <RCCEx_PLLSAI1_Config>
 8002a96:	4603      	mov	r3, r0
 8002a98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a9a:	7cfb      	ldrb	r3, [r7, #19]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8002aa0:	7cfb      	ldrb	r3, [r7, #19]
 8002aa2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d01c      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ab0:	4b19      	ldr	r3, [pc, #100]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002abe:	4916      	ldr	r1, [pc, #88]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ace:	d10c      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	2102      	movs	r1, #2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f820 	bl	8002b1c <RCCEx_PLLSAI1_Config>
 8002adc:	4603      	mov	r3, r0
 8002ade:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ae0:	7cfb      	ldrb	r3, [r7, #19]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8002ae6:	7cfb      	ldrb	r3, [r7, #19]
 8002ae8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002af6:	4b08      	ldr	r3, [pc, #32]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b04:	4904      	ldr	r1, [pc, #16]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000

08002b1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b2a:	4b74      	ldr	r3, [pc, #464]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d018      	beq.n	8002b68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b36:	4b71      	ldr	r3, [pc, #452]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0203 	and.w	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d10d      	bne.n	8002b62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
       ||
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b4e:	4b6b      	ldr	r3, [pc, #428]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d047      	beq.n	8002bf2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
 8002b66:	e044      	b.n	8002bf2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d018      	beq.n	8002ba2 <RCCEx_PLLSAI1_Config+0x86>
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d825      	bhi.n	8002bc0 <RCCEx_PLLSAI1_Config+0xa4>
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d002      	beq.n	8002b7e <RCCEx_PLLSAI1_Config+0x62>
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d009      	beq.n	8002b90 <RCCEx_PLLSAI1_Config+0x74>
 8002b7c:	e020      	b.n	8002bc0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b7e:	4b5f      	ldr	r3, [pc, #380]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d11d      	bne.n	8002bc6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b8e:	e01a      	b.n	8002bc6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b90:	4b5a      	ldr	r3, [pc, #360]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d116      	bne.n	8002bca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba0:	e013      	b.n	8002bca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ba2:	4b56      	ldr	r3, [pc, #344]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10f      	bne.n	8002bce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bae:	4b53      	ldr	r3, [pc, #332]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bbe:	e006      	b.n	8002bce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc4:	e004      	b.n	8002bd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bc6:	bf00      	nop
 8002bc8:	e002      	b.n	8002bd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bca:	bf00      	nop
 8002bcc:	e000      	b.n	8002bd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bce:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10d      	bne.n	8002bf2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bd6:	4b49      	ldr	r3, [pc, #292]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6819      	ldr	r1, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	430b      	orrs	r3, r1
 8002bec:	4943      	ldr	r1, [pc, #268]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d17c      	bne.n	8002cf2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bf8:	4b40      	ldr	r3, [pc, #256]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a3f      	ldr	r2, [pc, #252]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bfe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c04:	f7fe fb52 	bl	80012ac <HAL_GetTick>
 8002c08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c0a:	e009      	b.n	8002c20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c0c:	f7fe fb4e 	bl	80012ac <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d902      	bls.n	8002c20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c1e:	e005      	b.n	8002c2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c20:	4b36      	ldr	r3, [pc, #216]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1ef      	bne.n	8002c0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d15f      	bne.n	8002cf2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d110      	bne.n	8002c5a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c38:	4b30      	ldr	r3, [pc, #192]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002c40:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6892      	ldr	r2, [r2, #8]
 8002c48:	0211      	lsls	r1, r2, #8
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68d2      	ldr	r2, [r2, #12]
 8002c4e:	06d2      	lsls	r2, r2, #27
 8002c50:	430a      	orrs	r2, r1
 8002c52:	492a      	ldr	r1, [pc, #168]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	610b      	str	r3, [r1, #16]
 8002c58:	e027      	b.n	8002caa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d112      	bne.n	8002c86 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c60:	4b26      	ldr	r3, [pc, #152]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002c68:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6892      	ldr	r2, [r2, #8]
 8002c70:	0211      	lsls	r1, r2, #8
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6912      	ldr	r2, [r2, #16]
 8002c76:	0852      	lsrs	r2, r2, #1
 8002c78:	3a01      	subs	r2, #1
 8002c7a:	0552      	lsls	r2, r2, #21
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	491f      	ldr	r1, [pc, #124]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	610b      	str	r3, [r1, #16]
 8002c84:	e011      	b.n	8002caa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c86:	4b1d      	ldr	r3, [pc, #116]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c8e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6892      	ldr	r2, [r2, #8]
 8002c96:	0211      	lsls	r1, r2, #8
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6952      	ldr	r2, [r2, #20]
 8002c9c:	0852      	lsrs	r2, r2, #1
 8002c9e:	3a01      	subs	r2, #1
 8002ca0:	0652      	lsls	r2, r2, #25
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	4915      	ldr	r1, [pc, #84]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002caa:	4b14      	ldr	r3, [pc, #80]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a13      	ldr	r2, [pc, #76]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cb0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002cb4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7fe faf9 	bl	80012ac <HAL_GetTick>
 8002cba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cbc:	e009      	b.n	8002cd2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cbe:	f7fe faf5 	bl	80012ac <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d902      	bls.n	8002cd2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	73fb      	strb	r3, [r7, #15]
          break;
 8002cd0:	e005      	b.n	8002cde <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0ef      	beq.n	8002cbe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d106      	bne.n	8002cf2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ce4:	4b05      	ldr	r3, [pc, #20]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	4903      	ldr	r1, [pc, #12]	@ (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000

08002d00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e040      	b.n	8002d94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fe f980 	bl	8001028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2224      	movs	r2, #36	@ 0x24
 8002d2c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0201 	bic.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fdfc 	bl	8003944 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fb9f 	bl	8003490 <UART_SetConfig>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e01b      	b.n	8002d94 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 fe7b 	bl	8003a88 <UART_CheckIdleState>
 8002d92:	4603      	mov	r3, r0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b08b      	sub	sp, #44	@ 0x2c
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	4613      	mov	r3, r2
 8002da8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d147      	bne.n	8002e42 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <HAL_UART_Transmit_IT+0x22>
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e040      	b.n	8002e44 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	88fa      	ldrh	r2, [r7, #6]
 8002dcc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	88fa      	ldrh	r2, [r7, #6]
 8002dd4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2221      	movs	r2, #33	@ 0x21
 8002dea:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002df4:	d107      	bne.n	8002e06 <HAL_UART_Transmit_IT+0x6a>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d103      	bne.n	8002e06 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4a13      	ldr	r2, [pc, #76]	@ (8002e50 <HAL_UART_Transmit_IT+0xb4>)
 8002e02:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002e04:	e002      	b.n	8002e0c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4a12      	ldr	r2, [pc, #72]	@ (8002e54 <HAL_UART_Transmit_IT+0xb8>)
 8002e0a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	e853 3f00 	ldrex	r3, [r3]
 8002e18:	613b      	str	r3, [r7, #16]
   return(result);
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e20:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2a:	623b      	str	r3, [r7, #32]
 8002e2c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2e:	69f9      	ldr	r1, [r7, #28]
 8002e30:	6a3a      	ldr	r2, [r7, #32]
 8002e32:	e841 2300 	strex	r3, r2, [r1]
 8002e36:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1e6      	bne.n	8002e0c <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e000      	b.n	8002e44 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002e42:	2302      	movs	r3, #2
  }
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	372c      	adds	r7, #44	@ 0x2c
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	08003e5d 	.word	0x08003e5d
 8002e54:	08003da7 	.word	0x08003da7

08002e58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b0ba      	sub	sp, #232	@ 0xe8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002e82:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002e86:	4013      	ands	r3, r2
 8002e88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002e8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d115      	bne.n	8002ec0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00f      	beq.n	8002ec0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d009      	beq.n	8002ec0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 82ca 	beq.w	800344a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	4798      	blx	r3
      }
      return;
 8002ebe:	e2c4      	b.n	800344a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002ec0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 8117 	beq.w	80030f8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ed6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002eda:	4b85      	ldr	r3, [pc, #532]	@ (80030f0 <HAL_UART_IRQHandler+0x298>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 810a 	beq.w	80030f8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d011      	beq.n	8002f14 <HAL_UART_IRQHandler+0xbc>
 8002ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00b      	beq.n	8002f14 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2201      	movs	r2, #1
 8002f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f0a:	f043 0201 	orr.w	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d011      	beq.n	8002f44 <HAL_UART_IRQHandler+0xec>
 8002f20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00b      	beq.n	8002f44 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2202      	movs	r2, #2
 8002f32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f3a:	f043 0204 	orr.w	r2, r3, #4
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d011      	beq.n	8002f74 <HAL_UART_IRQHandler+0x11c>
 8002f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00b      	beq.n	8002f74 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2204      	movs	r2, #4
 8002f62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f6a:	f043 0202 	orr.w	r2, r3, #2
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d017      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d105      	bne.n	8002f98 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f90:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00b      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fa6:	f043 0208 	orr.w	r2, r3, #8
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d012      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x18a>
 8002fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fc0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00c      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fd8:	f043 0220 	orr.w	r2, r3, #32
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 8230 	beq.w	800344e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00d      	beq.n	8003016 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b00      	cmp	r3, #0
 8003004:	d007      	beq.n	8003016 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800301c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800302a:	2b40      	cmp	r3, #64	@ 0x40
 800302c:	d005      	beq.n	800303a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800302e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003032:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003036:	2b00      	cmp	r3, #0
 8003038:	d04f      	beq.n	80030da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fe39 	bl	8003cb2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800304a:	2b40      	cmp	r3, #64	@ 0x40
 800304c:	d141      	bne.n	80030d2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	3308      	adds	r3, #8
 8003054:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003058:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800305c:	e853 3f00 	ldrex	r3, [r3]
 8003060:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003064:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003068:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800306c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3308      	adds	r3, #8
 8003076:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800307a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800307e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003082:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003086:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800308a:	e841 2300 	strex	r3, r2, [r1]
 800308e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003092:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1d9      	bne.n	800304e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d013      	beq.n	80030ca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030a6:	4a13      	ldr	r2, [pc, #76]	@ (80030f4 <HAL_UART_IRQHandler+0x29c>)
 80030a8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fe fa7b 	bl	80015aa <HAL_DMA_Abort_IT>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d017      	beq.n	80030ea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80030c4:	4610      	mov	r0, r2
 80030c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c8:	e00f      	b.n	80030ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f9ca 	bl	8003464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d0:	e00b      	b.n	80030ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f9c6 	bl	8003464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d8:	e007      	b.n	80030ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f9c2 	bl	8003464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80030e8:	e1b1      	b.n	800344e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ea:	bf00      	nop
    return;
 80030ec:	e1af      	b.n	800344e <HAL_UART_IRQHandler+0x5f6>
 80030ee:	bf00      	nop
 80030f0:	04000120 	.word	0x04000120
 80030f4:	08003d7b 	.word	0x08003d7b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	f040 816a 	bne.w	80033d6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 8163 	beq.w	80033d6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 815c 	beq.w	80033d6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2210      	movs	r2, #16
 8003124:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003130:	2b40      	cmp	r3, #64	@ 0x40
 8003132:	f040 80d4 	bne.w	80032de <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003142:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 80ad 	beq.w	80032a6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003152:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003156:	429a      	cmp	r2, r3
 8003158:	f080 80a5 	bcs.w	80032a6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003162:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b00      	cmp	r3, #0
 8003174:	f040 8086 	bne.w	8003284 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003180:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003184:	e853 3f00 	ldrex	r3, [r3]
 8003188:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800318c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003190:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003194:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80031a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80031ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80031b2:	e841 2300 	strex	r3, r2, [r1]
 80031b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80031ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1da      	bne.n	8003178 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3308      	adds	r3, #8
 80031c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031cc:	e853 3f00 	ldrex	r3, [r3]
 80031d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80031d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3308      	adds	r3, #8
 80031e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80031e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80031ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80031ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80031f2:	e841 2300 	strex	r3, r2, [r1]
 80031f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80031f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1e1      	bne.n	80031c2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3308      	adds	r3, #8
 8003204:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003206:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003208:	e853 3f00 	ldrex	r3, [r3]
 800320c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800320e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003210:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003214:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3308      	adds	r3, #8
 800321e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003222:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003224:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003226:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003228:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800322a:	e841 2300 	strex	r3, r2, [r1]
 800322e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003230:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1e3      	bne.n	80031fe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800324c:	e853 3f00 	ldrex	r3, [r3]
 8003250:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003252:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003254:	f023 0310 	bic.w	r3, r3, #16
 8003258:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003266:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003268:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800326c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800326e:	e841 2300 	strex	r3, r2, [r1]
 8003272:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003274:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e4      	bne.n	8003244 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe f955 	bl	800152e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003296:	b29b      	uxth	r3, r3
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	b29b      	uxth	r3, r3
 800329c:	4619      	mov	r1, r3
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f8ea 	bl	8003478 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80032a4:	e0d5      	b.n	8003452 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80032ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032b0:	429a      	cmp	r2, r3
 80032b2:	f040 80ce 	bne.w	8003452 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	f040 80c5 	bne.w	8003452 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80032d4:	4619      	mov	r1, r3
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f8ce 	bl	8003478 <HAL_UARTEx_RxEventCallback>
      return;
 80032dc:	e0b9      	b.n	8003452 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 80ab 	beq.w	8003456 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003300:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80a6 	beq.w	8003456 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003312:	e853 3f00 	ldrex	r3, [r3]
 8003316:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800331a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800331e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800332c:	647b      	str	r3, [r7, #68]	@ 0x44
 800332e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003330:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003334:	e841 2300 	strex	r3, r2, [r1]
 8003338:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800333a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1e4      	bne.n	800330a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	3308      	adds	r3, #8
 8003346:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334a:	e853 3f00 	ldrex	r3, [r3]
 800334e:	623b      	str	r3, [r7, #32]
   return(result);
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	f023 0301 	bic.w	r3, r3, #1
 8003356:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3308      	adds	r3, #8
 8003360:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003364:	633a      	str	r2, [r7, #48]	@ 0x30
 8003366:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003368:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800336a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800336c:	e841 2300 	strex	r3, r2, [r1]
 8003370:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1e3      	bne.n	8003340 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	e853 3f00 	ldrex	r3, [r3]
 8003398:	60fb      	str	r3, [r7, #12]
   return(result);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f023 0310 	bic.w	r3, r3, #16
 80033a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033ae:	61fb      	str	r3, [r7, #28]
 80033b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b2:	69b9      	ldr	r1, [r7, #24]
 80033b4:	69fa      	ldr	r2, [r7, #28]
 80033b6:	e841 2300 	strex	r3, r2, [r1]
 80033ba:	617b      	str	r3, [r7, #20]
   return(result);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1e4      	bne.n	800338c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2202      	movs	r2, #2
 80033c6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80033cc:	4619      	mov	r1, r3
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f852 	bl	8003478 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033d4:	e03f      	b.n	8003456 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00e      	beq.n	8003400 <HAL_UART_IRQHandler+0x5a8>
 80033e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d008      	beq.n	8003400 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80033f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fdb9 	bl	8003f70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033fe:	e02d      	b.n	800345c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00e      	beq.n	800342a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800340c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800341c:	2b00      	cmp	r3, #0
 800341e:	d01c      	beq.n	800345a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	4798      	blx	r3
    }
    return;
 8003428:	e017      	b.n	800345a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800342a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800342e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d012      	beq.n	800345c <HAL_UART_IRQHandler+0x604>
 8003436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800343a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00c      	beq.n	800345c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fd6a 	bl	8003f1c <UART_EndTransmit_IT>
    return;
 8003448:	e008      	b.n	800345c <HAL_UART_IRQHandler+0x604>
      return;
 800344a:	bf00      	nop
 800344c:	e006      	b.n	800345c <HAL_UART_IRQHandler+0x604>
    return;
 800344e:	bf00      	nop
 8003450:	e004      	b.n	800345c <HAL_UART_IRQHandler+0x604>
      return;
 8003452:	bf00      	nop
 8003454:	e002      	b.n	800345c <HAL_UART_IRQHandler+0x604>
      return;
 8003456:	bf00      	nop
 8003458:	e000      	b.n	800345c <HAL_UART_IRQHandler+0x604>
    return;
 800345a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800345c:	37e8      	adds	r7, #232	@ 0xe8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop

08003464 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003494:	b08a      	sub	sp, #40	@ 0x28
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	431a      	orrs	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4b9e      	ldr	r3, [pc, #632]	@ (8003738 <UART_SetConfig+0x2a8>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034c8:	430b      	orrs	r3, r1
 80034ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a93      	ldr	r2, [pc, #588]	@ (800373c <UART_SetConfig+0x2ac>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d004      	beq.n	80034fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f8:	4313      	orrs	r3, r2
 80034fa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800350c:	430a      	orrs	r2, r1
 800350e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a8a      	ldr	r2, [pc, #552]	@ (8003740 <UART_SetConfig+0x2b0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d126      	bne.n	8003568 <UART_SetConfig+0xd8>
 800351a:	4b8a      	ldr	r3, [pc, #552]	@ (8003744 <UART_SetConfig+0x2b4>)
 800351c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	2b03      	cmp	r3, #3
 8003526:	d81b      	bhi.n	8003560 <UART_SetConfig+0xd0>
 8003528:	a201      	add	r2, pc, #4	@ (adr r2, 8003530 <UART_SetConfig+0xa0>)
 800352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352e:	bf00      	nop
 8003530:	08003541 	.word	0x08003541
 8003534:	08003551 	.word	0x08003551
 8003538:	08003549 	.word	0x08003549
 800353c:	08003559 	.word	0x08003559
 8003540:	2301      	movs	r3, #1
 8003542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003546:	e0ab      	b.n	80036a0 <UART_SetConfig+0x210>
 8003548:	2302      	movs	r3, #2
 800354a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800354e:	e0a7      	b.n	80036a0 <UART_SetConfig+0x210>
 8003550:	2304      	movs	r3, #4
 8003552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003556:	e0a3      	b.n	80036a0 <UART_SetConfig+0x210>
 8003558:	2308      	movs	r3, #8
 800355a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800355e:	e09f      	b.n	80036a0 <UART_SetConfig+0x210>
 8003560:	2310      	movs	r3, #16
 8003562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003566:	e09b      	b.n	80036a0 <UART_SetConfig+0x210>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a76      	ldr	r2, [pc, #472]	@ (8003748 <UART_SetConfig+0x2b8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d138      	bne.n	80035e4 <UART_SetConfig+0x154>
 8003572:	4b74      	ldr	r3, [pc, #464]	@ (8003744 <UART_SetConfig+0x2b4>)
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003578:	f003 030c 	and.w	r3, r3, #12
 800357c:	2b0c      	cmp	r3, #12
 800357e:	d82d      	bhi.n	80035dc <UART_SetConfig+0x14c>
 8003580:	a201      	add	r2, pc, #4	@ (adr r2, 8003588 <UART_SetConfig+0xf8>)
 8003582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003586:	bf00      	nop
 8003588:	080035bd 	.word	0x080035bd
 800358c:	080035dd 	.word	0x080035dd
 8003590:	080035dd 	.word	0x080035dd
 8003594:	080035dd 	.word	0x080035dd
 8003598:	080035cd 	.word	0x080035cd
 800359c:	080035dd 	.word	0x080035dd
 80035a0:	080035dd 	.word	0x080035dd
 80035a4:	080035dd 	.word	0x080035dd
 80035a8:	080035c5 	.word	0x080035c5
 80035ac:	080035dd 	.word	0x080035dd
 80035b0:	080035dd 	.word	0x080035dd
 80035b4:	080035dd 	.word	0x080035dd
 80035b8:	080035d5 	.word	0x080035d5
 80035bc:	2300      	movs	r3, #0
 80035be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035c2:	e06d      	b.n	80036a0 <UART_SetConfig+0x210>
 80035c4:	2302      	movs	r3, #2
 80035c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ca:	e069      	b.n	80036a0 <UART_SetConfig+0x210>
 80035cc:	2304      	movs	r3, #4
 80035ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035d2:	e065      	b.n	80036a0 <UART_SetConfig+0x210>
 80035d4:	2308      	movs	r3, #8
 80035d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035da:	e061      	b.n	80036a0 <UART_SetConfig+0x210>
 80035dc:	2310      	movs	r3, #16
 80035de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035e2:	e05d      	b.n	80036a0 <UART_SetConfig+0x210>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a58      	ldr	r2, [pc, #352]	@ (800374c <UART_SetConfig+0x2bc>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d125      	bne.n	800363a <UART_SetConfig+0x1aa>
 80035ee:	4b55      	ldr	r3, [pc, #340]	@ (8003744 <UART_SetConfig+0x2b4>)
 80035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80035f8:	2b30      	cmp	r3, #48	@ 0x30
 80035fa:	d016      	beq.n	800362a <UART_SetConfig+0x19a>
 80035fc:	2b30      	cmp	r3, #48	@ 0x30
 80035fe:	d818      	bhi.n	8003632 <UART_SetConfig+0x1a2>
 8003600:	2b20      	cmp	r3, #32
 8003602:	d00a      	beq.n	800361a <UART_SetConfig+0x18a>
 8003604:	2b20      	cmp	r3, #32
 8003606:	d814      	bhi.n	8003632 <UART_SetConfig+0x1a2>
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <UART_SetConfig+0x182>
 800360c:	2b10      	cmp	r3, #16
 800360e:	d008      	beq.n	8003622 <UART_SetConfig+0x192>
 8003610:	e00f      	b.n	8003632 <UART_SetConfig+0x1a2>
 8003612:	2300      	movs	r3, #0
 8003614:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003618:	e042      	b.n	80036a0 <UART_SetConfig+0x210>
 800361a:	2302      	movs	r3, #2
 800361c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003620:	e03e      	b.n	80036a0 <UART_SetConfig+0x210>
 8003622:	2304      	movs	r3, #4
 8003624:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003628:	e03a      	b.n	80036a0 <UART_SetConfig+0x210>
 800362a:	2308      	movs	r3, #8
 800362c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003630:	e036      	b.n	80036a0 <UART_SetConfig+0x210>
 8003632:	2310      	movs	r3, #16
 8003634:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003638:	e032      	b.n	80036a0 <UART_SetConfig+0x210>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a3f      	ldr	r2, [pc, #252]	@ (800373c <UART_SetConfig+0x2ac>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d12a      	bne.n	800369a <UART_SetConfig+0x20a>
 8003644:	4b3f      	ldr	r3, [pc, #252]	@ (8003744 <UART_SetConfig+0x2b4>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800364e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003652:	d01a      	beq.n	800368a <UART_SetConfig+0x1fa>
 8003654:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003658:	d81b      	bhi.n	8003692 <UART_SetConfig+0x202>
 800365a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800365e:	d00c      	beq.n	800367a <UART_SetConfig+0x1ea>
 8003660:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003664:	d815      	bhi.n	8003692 <UART_SetConfig+0x202>
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <UART_SetConfig+0x1e2>
 800366a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800366e:	d008      	beq.n	8003682 <UART_SetConfig+0x1f2>
 8003670:	e00f      	b.n	8003692 <UART_SetConfig+0x202>
 8003672:	2300      	movs	r3, #0
 8003674:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003678:	e012      	b.n	80036a0 <UART_SetConfig+0x210>
 800367a:	2302      	movs	r3, #2
 800367c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003680:	e00e      	b.n	80036a0 <UART_SetConfig+0x210>
 8003682:	2304      	movs	r3, #4
 8003684:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003688:	e00a      	b.n	80036a0 <UART_SetConfig+0x210>
 800368a:	2308      	movs	r3, #8
 800368c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003690:	e006      	b.n	80036a0 <UART_SetConfig+0x210>
 8003692:	2310      	movs	r3, #16
 8003694:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003698:	e002      	b.n	80036a0 <UART_SetConfig+0x210>
 800369a:	2310      	movs	r3, #16
 800369c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a25      	ldr	r2, [pc, #148]	@ (800373c <UART_SetConfig+0x2ac>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	f040 808a 	bne.w	80037c0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d824      	bhi.n	80036fe <UART_SetConfig+0x26e>
 80036b4:	a201      	add	r2, pc, #4	@ (adr r2, 80036bc <UART_SetConfig+0x22c>)
 80036b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ba:	bf00      	nop
 80036bc:	080036e1 	.word	0x080036e1
 80036c0:	080036ff 	.word	0x080036ff
 80036c4:	080036e9 	.word	0x080036e9
 80036c8:	080036ff 	.word	0x080036ff
 80036cc:	080036ef 	.word	0x080036ef
 80036d0:	080036ff 	.word	0x080036ff
 80036d4:	080036ff 	.word	0x080036ff
 80036d8:	080036ff 	.word	0x080036ff
 80036dc:	080036f7 	.word	0x080036f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e0:	f7fe ff46 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 80036e4:	61f8      	str	r0, [r7, #28]
        break;
 80036e6:	e010      	b.n	800370a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036e8:	4b19      	ldr	r3, [pc, #100]	@ (8003750 <UART_SetConfig+0x2c0>)
 80036ea:	61fb      	str	r3, [r7, #28]
        break;
 80036ec:	e00d      	b.n	800370a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ee:	f7fe fea7 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80036f2:	61f8      	str	r0, [r7, #28]
        break;
 80036f4:	e009      	b.n	800370a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036fa:	61fb      	str	r3, [r7, #28]
        break;
 80036fc:	e005      	b.n	800370a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003708:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 8109 	beq.w	8003924 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4413      	add	r3, r2
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	429a      	cmp	r2, r3
 8003720:	d305      	bcc.n	800372e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	429a      	cmp	r2, r3
 800372c:	d912      	bls.n	8003754 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003734:	e0f6      	b.n	8003924 <UART_SetConfig+0x494>
 8003736:	bf00      	nop
 8003738:	efff69f3 	.word	0xefff69f3
 800373c:	40008000 	.word	0x40008000
 8003740:	40013800 	.word	0x40013800
 8003744:	40021000 	.word	0x40021000
 8003748:	40004400 	.word	0x40004400
 800374c:	40004800 	.word	0x40004800
 8003750:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	2200      	movs	r2, #0
 8003758:	461c      	mov	r4, r3
 800375a:	4615      	mov	r5, r2
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	022b      	lsls	r3, r5, #8
 8003766:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800376a:	0222      	lsls	r2, r4, #8
 800376c:	68f9      	ldr	r1, [r7, #12]
 800376e:	6849      	ldr	r1, [r1, #4]
 8003770:	0849      	lsrs	r1, r1, #1
 8003772:	2000      	movs	r0, #0
 8003774:	4688      	mov	r8, r1
 8003776:	4681      	mov	r9, r0
 8003778:	eb12 0a08 	adds.w	sl, r2, r8
 800377c:	eb43 0b09 	adc.w	fp, r3, r9
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	607a      	str	r2, [r7, #4]
 800378a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800378e:	4650      	mov	r0, sl
 8003790:	4659      	mov	r1, fp
 8003792:	f7fc fd1b 	bl	80001cc <__aeabi_uldivmod>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4613      	mov	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037a4:	d308      	bcc.n	80037b8 <UART_SetConfig+0x328>
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037ac:	d204      	bcs.n	80037b8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	60da      	str	r2, [r3, #12]
 80037b6:	e0b5      	b.n	8003924 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80037be:	e0b1      	b.n	8003924 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037c8:	d15d      	bne.n	8003886 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80037ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d827      	bhi.n	8003822 <UART_SetConfig+0x392>
 80037d2:	a201      	add	r2, pc, #4	@ (adr r2, 80037d8 <UART_SetConfig+0x348>)
 80037d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d8:	080037fd 	.word	0x080037fd
 80037dc:	08003805 	.word	0x08003805
 80037e0:	0800380d 	.word	0x0800380d
 80037e4:	08003823 	.word	0x08003823
 80037e8:	08003813 	.word	0x08003813
 80037ec:	08003823 	.word	0x08003823
 80037f0:	08003823 	.word	0x08003823
 80037f4:	08003823 	.word	0x08003823
 80037f8:	0800381b 	.word	0x0800381b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037fc:	f7fe feb8 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 8003800:	61f8      	str	r0, [r7, #28]
        break;
 8003802:	e014      	b.n	800382e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003804:	f7fe feca 	bl	800259c <HAL_RCC_GetPCLK2Freq>
 8003808:	61f8      	str	r0, [r7, #28]
        break;
 800380a:	e010      	b.n	800382e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800380c:	4b4c      	ldr	r3, [pc, #304]	@ (8003940 <UART_SetConfig+0x4b0>)
 800380e:	61fb      	str	r3, [r7, #28]
        break;
 8003810:	e00d      	b.n	800382e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003812:	f7fe fe15 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 8003816:	61f8      	str	r0, [r7, #28]
        break;
 8003818:	e009      	b.n	800382e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800381a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800381e:	61fb      	str	r3, [r7, #28]
        break;
 8003820:	e005      	b.n	800382e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800382c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d077      	beq.n	8003924 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	005a      	lsls	r2, r3, #1
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	085b      	lsrs	r3, r3, #1
 800383e:	441a      	add	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	fbb2 f3f3 	udiv	r3, r2, r3
 8003848:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	2b0f      	cmp	r3, #15
 800384e:	d916      	bls.n	800387e <UART_SetConfig+0x3ee>
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003856:	d212      	bcs.n	800387e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	b29b      	uxth	r3, r3
 800385c:	f023 030f 	bic.w	r3, r3, #15
 8003860:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	b29b      	uxth	r3, r3
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	b29a      	uxth	r2, r3
 800386e:	8afb      	ldrh	r3, [r7, #22]
 8003870:	4313      	orrs	r3, r2
 8003872:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	8afa      	ldrh	r2, [r7, #22]
 800387a:	60da      	str	r2, [r3, #12]
 800387c:	e052      	b.n	8003924 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003884:	e04e      	b.n	8003924 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003886:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800388a:	2b08      	cmp	r3, #8
 800388c:	d827      	bhi.n	80038de <UART_SetConfig+0x44e>
 800388e:	a201      	add	r2, pc, #4	@ (adr r2, 8003894 <UART_SetConfig+0x404>)
 8003890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003894:	080038b9 	.word	0x080038b9
 8003898:	080038c1 	.word	0x080038c1
 800389c:	080038c9 	.word	0x080038c9
 80038a0:	080038df 	.word	0x080038df
 80038a4:	080038cf 	.word	0x080038cf
 80038a8:	080038df 	.word	0x080038df
 80038ac:	080038df 	.word	0x080038df
 80038b0:	080038df 	.word	0x080038df
 80038b4:	080038d7 	.word	0x080038d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b8:	f7fe fe5a 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 80038bc:	61f8      	str	r0, [r7, #28]
        break;
 80038be:	e014      	b.n	80038ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038c0:	f7fe fe6c 	bl	800259c <HAL_RCC_GetPCLK2Freq>
 80038c4:	61f8      	str	r0, [r7, #28]
        break;
 80038c6:	e010      	b.n	80038ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003940 <UART_SetConfig+0x4b0>)
 80038ca:	61fb      	str	r3, [r7, #28]
        break;
 80038cc:	e00d      	b.n	80038ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ce:	f7fe fdb7 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80038d2:	61f8      	str	r0, [r7, #28]
        break;
 80038d4:	e009      	b.n	80038ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038da:	61fb      	str	r3, [r7, #28]
        break;
 80038dc:	e005      	b.n	80038ea <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80038e8:	bf00      	nop
    }

    if (pclk != 0U)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d019      	beq.n	8003924 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	085a      	lsrs	r2, r3, #1
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	441a      	add	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003902:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2b0f      	cmp	r3, #15
 8003908:	d909      	bls.n	800391e <UART_SetConfig+0x48e>
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003910:	d205      	bcs.n	800391e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	60da      	str	r2, [r3, #12]
 800391c:	e002      	b.n	8003924 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003930:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003934:	4618      	mov	r0, r3
 8003936:	3728      	adds	r7, #40	@ 0x28
 8003938:	46bd      	mov	sp, r7
 800393a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800393e:	bf00      	nop
 8003940:	00f42400 	.word	0x00f42400

08003944 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01a      	beq.n	8003a5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a42:	d10a      	bne.n	8003a5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	605a      	str	r2, [r3, #4]
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b098      	sub	sp, #96	@ 0x60
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a98:	f7fd fc08 	bl	80012ac <HAL_GetTick>
 8003a9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d12e      	bne.n	8003b0a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f88c 	bl	8003bd8 <UART_WaitOnFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d021      	beq.n	8003b0a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ad6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ada:	653b      	str	r3, [r7, #80]	@ 0x50
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ae4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ae6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003aea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e6      	bne.n	8003ac6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e062      	b.n	8003bd0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d149      	bne.n	8003bac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b20:	2200      	movs	r2, #0
 8003b22:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f856 	bl	8003bd8 <UART_WaitOnFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d03c      	beq.n	8003bac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3a:	e853 3f00 	ldrex	r3, [r3]
 8003b3e:	623b      	str	r3, [r7, #32]
   return(result);
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b50:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b52:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b58:	e841 2300 	strex	r3, r2, [r1]
 8003b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e6      	bne.n	8003b32 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3308      	adds	r3, #8
 8003b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3308      	adds	r3, #8
 8003b82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b84:	61fa      	str	r2, [r7, #28]
 8003b86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	69b9      	ldr	r1, [r7, #24]
 8003b8a:	69fa      	ldr	r2, [r7, #28]
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	617b      	str	r3, [r7, #20]
   return(result);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e5      	bne.n	8003b64 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e011      	b.n	8003bd0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3758      	adds	r7, #88	@ 0x58
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be8:	e04f      	b.n	8003c8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf0:	d04b      	beq.n	8003c8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf2:	f7fd fb5b 	bl	80012ac <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d302      	bcc.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e04e      	b.n	8003caa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d037      	beq.n	8003c8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b80      	cmp	r3, #128	@ 0x80
 8003c1e:	d034      	beq.n	8003c8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b40      	cmp	r3, #64	@ 0x40
 8003c24:	d031      	beq.n	8003c8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d110      	bne.n	8003c56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2208      	movs	r2, #8
 8003c3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f838 	bl	8003cb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2208      	movs	r2, #8
 8003c46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e029      	b.n	8003caa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c64:	d111      	bne.n	8003c8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 f81e 	bl	8003cb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e00f      	b.n	8003caa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69da      	ldr	r2, [r3, #28]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4013      	ands	r3, r2
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	bf0c      	ite	eq
 8003c9a:	2301      	moveq	r3, #1
 8003c9c:	2300      	movne	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d0a0      	beq.n	8003bea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b095      	sub	sp, #84	@ 0x54
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cc2:	e853 3f00 	ldrex	r3, [r3]
 8003cc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cda:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ce0:	e841 2300 	strex	r3, r2, [r1]
 8003ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e6      	bne.n	8003cba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	e853 3f00 	ldrex	r3, [r3]
 8003cfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f023 0301 	bic.w	r3, r3, #1
 8003d02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3308      	adds	r3, #8
 8003d0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d14:	e841 2300 	strex	r3, r2, [r1]
 8003d18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1e5      	bne.n	8003cec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d118      	bne.n	8003d5a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	e853 3f00 	ldrex	r3, [r3]
 8003d34:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f023 0310 	bic.w	r3, r3, #16
 8003d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d46:	61bb      	str	r3, [r7, #24]
 8003d48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	6979      	ldr	r1, [r7, #20]
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	e841 2300 	strex	r3, r2, [r1]
 8003d52:	613b      	str	r3, [r7, #16]
   return(result);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e6      	bne.n	8003d28 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003d6e:	bf00      	nop
 8003d70:	3754      	adds	r7, #84	@ 0x54
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f7ff fb63 	bl	8003464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d9e:	bf00      	nop
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b08f      	sub	sp, #60	@ 0x3c
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003db2:	2b21      	cmp	r3, #33	@ 0x21
 8003db4:	d14c      	bne.n	8003e50 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d132      	bne.n	8003e28 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	e853 3f00 	ldrex	r3, [r3]
 8003dce:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003de2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e6      	bne.n	8003dc2 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e12:	61bb      	str	r3, [r7, #24]
 8003e14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e16:	6979      	ldr	r1, [r7, #20]
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	e841 2300 	strex	r3, r2, [r1]
 8003e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1e6      	bne.n	8003df4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003e26:	e013      	b.n	8003e50 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2c:	781a      	ldrb	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8003e50:	bf00      	nop
 8003e52:	373c      	adds	r7, #60	@ 0x3c
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b091      	sub	sp, #68	@ 0x44
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e68:	2b21      	cmp	r3, #33	@ 0x21
 8003e6a:	d151      	bne.n	8003f10 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d132      	bne.n	8003ede <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	623b      	str	r3, [r7, #32]
   return(result);
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e96:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e98:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e6      	bne.n	8003e78 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	e853 3f00 	ldrex	r3, [r3]
 8003eb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ebe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ecc:	69b9      	ldr	r1, [r7, #24]
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	e841 2300 	strex	r3, r2, [r1]
 8003ed4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e6      	bne.n	8003eaa <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003edc:	e018      	b.n	8003f10 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ee6:	881a      	ldrh	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ef0:	b292      	uxth	r2, r2
 8003ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef8:	1c9a      	adds	r2, r3, #2
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8003f10:	bf00      	nop
 8003f12:	3744      	adds	r7, #68	@ 0x44
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	e853 3f00 	ldrex	r3, [r3]
 8003f30:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f38:	61fb      	str	r3, [r7, #28]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	61bb      	str	r3, [r7, #24]
 8003f44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	6979      	ldr	r1, [r7, #20]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e6      	bne.n	8003f24 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fd f82c 	bl	8000fc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f68:	bf00      	nop
 8003f6a:	3720      	adds	r7, #32
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <memset>:
 8003f84:	4402      	add	r2, r0
 8003f86:	4603      	mov	r3, r0
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d100      	bne.n	8003f8e <memset+0xa>
 8003f8c:	4770      	bx	lr
 8003f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f92:	e7f9      	b.n	8003f88 <memset+0x4>

08003f94 <__libc_init_array>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	4d0d      	ldr	r5, [pc, #52]	@ (8003fcc <__libc_init_array+0x38>)
 8003f98:	4c0d      	ldr	r4, [pc, #52]	@ (8003fd0 <__libc_init_array+0x3c>)
 8003f9a:	1b64      	subs	r4, r4, r5
 8003f9c:	10a4      	asrs	r4, r4, #2
 8003f9e:	2600      	movs	r6, #0
 8003fa0:	42a6      	cmp	r6, r4
 8003fa2:	d109      	bne.n	8003fb8 <__libc_init_array+0x24>
 8003fa4:	4d0b      	ldr	r5, [pc, #44]	@ (8003fd4 <__libc_init_array+0x40>)
 8003fa6:	4c0c      	ldr	r4, [pc, #48]	@ (8003fd8 <__libc_init_array+0x44>)
 8003fa8:	f000 f818 	bl	8003fdc <_init>
 8003fac:	1b64      	subs	r4, r4, r5
 8003fae:	10a4      	asrs	r4, r4, #2
 8003fb0:	2600      	movs	r6, #0
 8003fb2:	42a6      	cmp	r6, r4
 8003fb4:	d105      	bne.n	8003fc2 <__libc_init_array+0x2e>
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fbc:	4798      	blx	r3
 8003fbe:	3601      	adds	r6, #1
 8003fc0:	e7ee      	b.n	8003fa0 <__libc_init_array+0xc>
 8003fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc6:	4798      	blx	r3
 8003fc8:	3601      	adds	r6, #1
 8003fca:	e7f2      	b.n	8003fb2 <__libc_init_array+0x1e>
 8003fcc:	08004044 	.word	0x08004044
 8003fd0:	08004044 	.word	0x08004044
 8003fd4:	08004044 	.word	0x08004044
 8003fd8:	08004048 	.word	0x08004048

08003fdc <_init>:
 8003fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fde:	bf00      	nop
 8003fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe2:	bc08      	pop	{r3}
 8003fe4:	469e      	mov	lr, r3
 8003fe6:	4770      	bx	lr

08003fe8 <_fini>:
 8003fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fea:	bf00      	nop
 8003fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fee:	bc08      	pop	{r3}
 8003ff0:	469e      	mov	lr, r3
 8003ff2:	4770      	bx	lr
